import { TemplateParserConfig } from "../template-parser/template-parser-config";
import { ITemplateLanguage } from "../template-language/template-language";
/**
 * Represents a translator implementation, which translates localizable content.
 * Use this for e.g. automated translation using a machine-translation service or for pseudo-localization during testing.
 */
export interface IContentTranslator {
    /**
     * Translates the specified content.
     * @param templateHtml The content that should be translated.
     * @returns The translated content.
     */
    translate(templateHtml: string): string;
}
/**
 * Represents a base class for translators, which implements the basic parsing of included and excluded content,
 * while leaving the actual text translation to the concrete implementation.
 */
export declare abstract class ContentTranslator implements IContentTranslator {
    private readonly templateParserConfig;
    private readonly templateLanguage;
    /**
     * Creates a new instance of the PseudoContentTranslator type.
     * @param templateParserConfig The TemplateParserConfig instance.
     * @param templateLanguage The ITemplateLanguage instance.
     */
    constructor(templateParserConfig: TemplateParserConfig, templateLanguage: ITemplateLanguage);
    /**
     * Translates the specified content, producing pseudo-translated content suitable for identifying localization issues.
     * @param templateHtml The content that should be translated.
     * @returns The translated content.
     */
    translate(templateHtml: string): string;
    /**
     * Translates the specified text content.
     * @param text The text content that should be translated.
     * @returns The translated text content.
     */
    protected abstract translateText(text: string): string;
    /**
     * Recursively parses and translates the element tree and its attributes, starting with the specified element.
     * @param $ The CheerioStatic instance.
     * @param element The element representing the root of the tree.
     * @param translate True if the element should be translated, otherwise false.
     */
    private parseNode;
    /**
     * Parses and translates the specified attribute.
     * @param $ The CheerioStatic instance.
     * @param element The element representing the root of the tree.
     * @param attrName The name of the attribute.
     */
    private parseAttribute;
}
