"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PseudoContentTranslator = void 0;
var tslib_1 = require("tslib");
var content_translator_1 = require("../../content-translator");
/**
 * Represents a translator implementation, which translates localizable content into pseudo-translated content.
 * Pseudo-localization is used during testing and allows localization issues to be identified earlier and more reliably.
 * Note that this service only handles strings in latin-based languages and is primarily intended for use with English.
 */
var PseudoContentTranslator = /** @class */ (function (_super) {
    tslib_1.__extends(PseudoContentTranslator, _super);
    /**
     * Creates a new instance of the PseudoContentTranslator type.
     * @param templateParserConfig The TemplateParserConfig instance.
     * @param templateLanguage The ITemplateLanguage instance.
     */
    function PseudoContentTranslator(templateParserConfig, templateLanguage) {
        return _super.call(this, templateParserConfig, templateLanguage) || this;
    }
    /**
     * Translates the specified text content.
     * @param text The text content that should be translated.
     * @returns The translated text content.
     */
    PseudoContentTranslator.prototype.translateText = function (text) {
        var result = "";
        var isWhitespace = /^\s*$/.test(text);
        if (isWhitespace) {
            result = text;
        }
        else {
            // Begin the string with a bracket to help identify strings that are being cut off or concatenated.
            result += "[";
            // Insert periods between word characters.
            var waitingForCharacterEnd = false;
            for (var i = 0; i < text.length; i++) {
                var character = text[i];
                switch (character) {
                    case "&":
                        waitingForCharacterEnd = true;
                        break;
                    case " ":
                        waitingForCharacterEnd = false;
                        break;
                    case ";":
                        waitingForCharacterEnd = false;
                        break;
                }
                if (waitingForCharacterEnd) {
                    result += character;
                    continue;
                }
                result += character;
                if (character.match(/\w/) && i < text.length - 1 && text[i + 1].match(/\w/) && !text[i + 1].match(/_/)) {
                    result += "Â·";
                }
            }
            // End the string with a bracket to help identify strings that are being cut off or concatenated.
            result += "]";
        }
        // Return the pseudo-translated string.
        return result;
    };
    return PseudoContentTranslator;
}(content_translator_1.ContentTranslator));
exports.PseudoContentTranslator = PseudoContentTranslator;
//# sourceMappingURL=pseudo-content-translator.js.map