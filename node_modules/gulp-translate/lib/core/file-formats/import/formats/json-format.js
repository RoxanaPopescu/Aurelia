"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonImportFileFormat = void 0;
var tslib_1 = require("tslib");
var chalk_1 = tslib_1.__importDefault(require("chalk"));
var import_file_1 = require("../import-file");
/**
 * Represents the JSON file format in which an ImportFile instance may be persisted.
 */
var JsonImportFileFormat = /** @class */ (function () {
    function JsonImportFileFormat() {
    }
    /**
     * Stringifies the specified ImportFile instance.
     * @param importFile The ImportFile to stringify.
     * @returns A string representing the ImportFile instance.
     */
    JsonImportFileFormat.prototype.stringify = function (importFile) {
        return JSON.stringify(importFile.contents, null, 2);
    };
    /**
     * Parses the specified string, creating a new instance of the ImportFile type.
     * @param text The string to parse.
     * @returns The new instance of the ImportFile type.
     */
    JsonImportFileFormat.prototype.parse = function (text) {
        var e_1, _a, e_2, _b;
        var importFile = new import_file_1.ImportFile();
        var data = JSON.parse(text);
        try {
            for (var _c = tslib_1.__values(Object.keys(data)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var key = _d.value;
                // Does this key represent a content ID?
                if (typeof data[key] === "string") {
                    importFile.set("./", key, data[key]);
                }
                // Otherwise it must represent a scope path.
                else {
                    if (!/^\.\//.test(key)) {
                        throw new Error("Invalid scope path '" + chalk_1.default.magenta(key) + "'. Expected a string that begins with '" + chalk_1.default.magenta("./") + "'.");
                    }
                    var contents = data[key];
                    try {
                        for (var _e = (e_2 = void 0, tslib_1.__values(Object.keys(contents))), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var id = _f.value;
                            var content = contents[id];
                            if (typeof content !== "string") {
                                throw new Error("Invalid content for id '" + chalk_1.default.cyan(id) + "'. Expected a string.");
                            }
                            importFile.set(key, id, content);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return importFile;
    };
    return JsonImportFileFormat;
}());
exports.JsonImportFileFormat = JsonImportFileFormat;
//# sourceMappingURL=json-format.js.map