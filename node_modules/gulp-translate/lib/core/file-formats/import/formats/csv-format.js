"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CsvImportFileFormat = void 0;
var tslib_1 = require("tslib");
/* tslint:disable: no-require-imports no-var-requires no-submodule-imports */
var csvStringify = require("csv-stringify/lib/sync");
var csvParse = require("csv-parse/lib/sync");
/* tslint:enable */
var import_file_1 = require("../import-file");
/**
 * Represents the CSV file format in which a ImportFile instance may be persisted.
 */
var CsvImportFileFormat = /** @class */ (function () {
    function CsvImportFileFormat() {
    }
    /**
     * Stringifies the specified ImportFile instance.
     * @param importFile The ImportFile to stringify.
     * @returns A string representing the ImportFile instance.
     */
    CsvImportFileFormat.prototype.stringify = function (importFile) {
        var e_1, _a, e_2, _b;
        var data = [];
        try {
            for (var _c = tslib_1.__values(Object.keys(importFile.contents)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var path = _d.value;
                var contents = importFile.contents[path];
                try {
                    for (var _e = (e_2 = void 0, tslib_1.__values(Object.keys(contents))), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var id = _f.value;
                        var content = contents[id];
                        data.push({ path: path, id: id, content: content });
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return csvStringify(data, { quotedString: true, columns: ["path", "id", "content"] });
    };
    /**
     * Parses the specified string, creating a new instance of the ImportFile type.
     * @param text The string to parse.
     * @returns The new instance of the ImportFile type.
     */
    CsvImportFileFormat.prototype.parse = function (text) {
        var importFile = new import_file_1.ImportFile();
        var data = csvParse(text, { skip_empty_lines: true, columns: ["path", "id", "content"] });
        for (var i = 0; i < data.length; i++) {
            var row = data[i];
            if (!row.id) {
                throw new Error("Invalid data on row " + (i + 1) + ".");
            }
            importFile.set(row.path || "./", row.id, row.content);
        }
        return importFile;
    };
    return CsvImportFileFormat;
}());
exports.CsvImportFileFormat = CsvImportFileFormat;
//# sourceMappingURL=csv-format.js.map