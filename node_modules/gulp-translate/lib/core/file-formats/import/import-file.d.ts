/// <reference types="node" />
/**
 * Represents a file format in which an ImportFile instance may be persisted.
 */
export interface IImportFileFormat {
    /**
     * Stringifies the specified ImportFile instance.
     * @param importFile The ImportFile to stringify.
     * @returns A string representing the ImportFile instance.
     */
    stringify(importFile: ImportFile): string;
    /**
     * Parses the specified string, creating a new instance of the ImportFile type.
     * @param text The string to parse.
     * @returns The new instance of the ImportFile type.
     */
    parse(text: string): ImportFile;
}
/**
 * Represents localized contents to be imported into templates, where each content instance is identified by an id,
 * and scoped to a file or folder path.
 */
export declare class ImportFile {
    /**
     * Parses the specified text, creating a new instance of the ImportFile type.
     * @param text The string to parse.
     * @param fileNameExt The file name extension for the format to parse.
     * @returns The new instance of the ImportFile type.
     */
    static parse(text: string, fileNameExt: string): ImportFile;
    /**
     * Loads the specified file, creating a new instance of the ImportFile type.
     * @param filePath The absolute path for the file to load.
     * @param encoding The file encoding to use, or undefined to use UTF8.
     * @returns The new instance of the ImportFile type.
     */
    static load(filePath: string, encoding?: BufferEncoding): ImportFile;
    /**
     * Creates a new instance of the appropiate IExportFileFormat type, based on the specified file path.
     * @param fileNameExt The file name extension for which a format should be created.
     * @returns The new instance of the IExportFileFormat type.
     */
    private static getFormat;
    /**
     * The contents of the file.
     */
    contents: {
        [path: string]: {
            [id: string]: string;
        };
    };
    /**
     * Sets the specified content, scoped to the specified path.
     * @param scopePath The relative file or folder path for which the content should be returned.
     * @param id The id identifying the content.
     * @param content The content to set.
     */
    set(scopePath: string, id: string, content: string): void;
    /**
     * Gets the content matching the specified id and scope path.
     * @param scopePath The relative file or folder path for which the content should be returned.
     * @param id The id identifying the content.
     * @returns The content matching the specified path and id, or undefined if no content is found.
     */
    get(scopePath: string, id: string): string | undefined;
    /**
     * Serializes the contents to a JSON string.
     * @returns A JSON string representing the file contents.
     */
    stringify(fileNameExt: string): string;
    /**
     * Saves the contents to the specified file.
     * @param filePath The absolute path for the file to which the contents should be saved.
     * @param encoding The file encoding to use, or undefined to use UTF8.
     * @returns A promise that will be resolved when the file has been saved.
     */
    save(filePath: string, encoding?: BufferEncoding): Promise<void>;
}
