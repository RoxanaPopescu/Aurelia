/// <reference types="node" />
/**
 * Represents a file format in which a ContentFile instance may be persisted.
 */
export interface IContentFileFormat {
    /**
     * Stringifies the specified ContentFile instance.
     * @param importFile The ContentFile to stringify.
     * @returns A string representing the ContentFile instance.
     */
    stringify(importFile: ContentFile): string;
    /**
     * Parses the specified string, creating a new instance of the ContentFile type.
     * @param text The string to parse.
     * @returns The new instance of the ContentFile type.
     */
    parse(text: string): ContentFile;
}
/**
 * Represents localizable or localized contents, where each content instance is identified by an id.
 */
export declare class ContentFile {
    /**
     * Parses the specified text, creating a new instance of the ContentFile type.
     * @param text The string to parse.
     * @param fileNameExt The file name extension for the format to parse.
     * @returns The new instance of the ContentFile type.
     */
    static parse(text: string, fileNameExt: string): ContentFile;
    /**
     * Loads the specified file, creating a new instance of the ContentFile type.
     * @param filePath The absolute path for the file to load.
     * @param encoding The file encoding to use, or undefined to use UTF8.
     * @returns The new instance of the ContentFile type.
     */
    static load(filePath: string, encoding?: BufferEncoding): ContentFile;
    /**
     * Creates a new instance of the appropiate IExportFileFormat type, based on the specified file path.
     * @param fileNameExt The file name extension for which a format should be created.
     * @returns The new instance of the IExportFileFormat type.
     */
    private static getFormat;
    /**
     * The contents of the file.
     */
    contents: {
        [id: string]: string;
    };
    /**
     * Sets the specified content.
     * @param id The id identifying the content.
     * @param content The content to set.
     */
    set(id: string, content: string): void;
    /**
     * Gets the content matching the specified id.
     * @param id The id identifying the content.
     * @returns The content matching the specified id, or undefined if no content is found.
     */
    get(id: string): string | undefined;
    /**
     * Serializes the contents to a JSON string.
     * @returns A JSON string representing the file contents.
     */
    stringify(fileNameExt: string): string;
    /**
     * Saves the contents to the specified file.
     * @param filePath The absolute path for the file to which the contents should be saved.
     * @param encoding The file encoding to use, or undefined to use UTF8.
     * @returns A promise that will be resolved when the file has been saved.
     */
    save(filePath: string, encoding?: BufferEncoding): Promise<void>;
}
