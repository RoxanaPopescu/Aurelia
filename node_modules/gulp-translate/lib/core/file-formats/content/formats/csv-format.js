"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CsvContentFileFormat = void 0;
var tslib_1 = require("tslib");
/* tslint:disable: no-require-imports no-var-requires no-submodule-imports */
var csvStringify = require("csv-stringify/lib/sync");
var csvParse = require("csv-parse/lib/sync");
/* tslint:enable */
var content_file_1 = require("../content-file");
/**
 * Represents the CSV file format in which a ContentFile instance may be persisted.
 */
var CsvContentFileFormat = /** @class */ (function () {
    function CsvContentFileFormat() {
    }
    /**
     * Stringifies the specified ContentFile instance.
     * @param contentFile The ContentFile to stringify.
     * @returns A string representing the ContentFile instance.
     */
    CsvContentFileFormat.prototype.stringify = function (contentFile) {
        var e_1, _a;
        var data = [];
        try {
            for (var _b = tslib_1.__values(Object.keys(contentFile.contents)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var id = _c.value;
                var content = contentFile.contents[id];
                data.push({ id: id, content: content });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return csvStringify(data, { quotedString: true, columns: ["id", "content"] });
    };
    /**
     * Parses the specified string, creating a new instance of the ContentFile type.
     * @param text The string to parse.
     * @returns The new instance of the ContentFile type.
     */
    CsvContentFileFormat.prototype.parse = function (text) {
        var contentFile = new content_file_1.ContentFile();
        var data = csvParse(text, { skip_empty_lines: true, columns: ["id", "content"] });
        for (var i = 0; i < data.length; i++) {
            var row = data[i];
            if (!row.id) {
                throw new Error("Invalid data on row " + (i + 1) + ".");
            }
            contentFile.contents[row.id] = row.content;
        }
        return contentFile;
    };
    return CsvContentFileFormat;
}());
exports.CsvContentFileFormat = CsvContentFileFormat;
//# sourceMappingURL=csv-format.js.map