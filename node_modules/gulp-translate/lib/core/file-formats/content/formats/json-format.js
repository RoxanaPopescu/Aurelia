"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonContentFileFormat = void 0;
var tslib_1 = require("tslib");
var chalk_1 = tslib_1.__importDefault(require("chalk"));
var content_file_1 = require("../content-file");
/**
 * Represents the JSON file format in which a ContentFile instance may be persisted.
 */
var JsonContentFileFormat = /** @class */ (function () {
    function JsonContentFileFormat() {
    }
    /**
     * Stringifies the specified ContentFile instance.
     * @param contentFile The ContentFile to stringify.
     * @returns A string representing the ContentFile instance.
     */
    JsonContentFileFormat.prototype.stringify = function (contentFile) {
        return JSON.stringify(contentFile.contents, null, 2);
    };
    /**
     * Parses the specified string, creating a new instance of the ContentFile type.
     * @param text The string to parse.
     * @returns The new instance of the ContentFile type.
     */
    JsonContentFileFormat.prototype.parse = function (text) {
        var e_1, _a;
        var contentFile = new content_file_1.ContentFile();
        var data = JSON.parse(text);
        try {
            for (var _b = tslib_1.__values(Object.keys(data)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var id = _c.value;
                var content = data[id];
                if (typeof content !== "string") {
                    throw new Error("Invalid content for id '" + chalk_1.default.cyan(id) + "'. Expected a string.");
                }
                contentFile.contents[id] = content;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return contentFile;
    };
    return JsonContentFileFormat;
}());
exports.JsonContentFileFormat = JsonContentFileFormat;
//# sourceMappingURL=json-format.js.map