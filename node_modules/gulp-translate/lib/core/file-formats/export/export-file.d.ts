/// <reference types="node" />
/**
 * Represents a localizable content instance parsed from one or more templates.
 */
export declare class Content {
    /**
     * Creates a new instance of the Content type.
     * @param content The exported from the template.
     * @param hint The hint exported along with the content.
     * @param context The contexts exported along with the content.
     * @param sources The relative paths for the HTML files containing an instance of this content.
     */
    constructor(content: string, hint?: string, context?: string[], sources?: string[]);
    /**
     * The content exported from the template.
     */
    content: string;
    /**
     * The hint exported along with the content.
     */
    hint?: string;
    /**
     * The contexts exported along with the content.
     */
    context?: string[];
    /**
     * The sets of relative paths for the HTML files containing an instance of this content.
     */
    sources: string[];
}
/**
 * Represents a file format in which an ExportFile instance may be persisted.
 */
export interface IExportFileFormat {
    /**
     * Stringifies the specified ExportFile instance.
     * @param exportFile The ExportFile to stringify.
     * @returns A string representing the ExportFile instance.
     */
    stringify(exportFile: ExportFile): string;
    /**
     * Parses the specified string, creating a new instance of the ExportFile type.
     * @param text The string to parse.
     * @returns The new instance of the ExportFile type.
     */
    parse(text: string): ExportFile;
}
/**
 * Represents localizable contents exported from templates, where each content instance is identified by an id,
 * and represented by an object containing the content, its hint text and the list of files in which it was found.
 */
export declare class ExportFile {
    /**
     * Parses the specified text, creating a new instance of the ExportFile type.
     * @param text The string to parse.
     * @param fileNameExt The file name extension for the format to parse.
     * @returns The new instance of the ExportFile type.
     */
    static parse(text: string, fileNameExt: string): ExportFile;
    /**
     * Loads the specified file, creating a new instance of the ExportFile type.
     * @param filePath The absolute path for the file to load.
     * @param encoding The file encoding to use, or undefined to use UTF8.
     * @returns The new instance of the ExportFile type.
     */
    static load(filePath: string, encoding?: BufferEncoding): ExportFile;
    /**
     * Creates a new instance of the appropiate IExportFileFormat type, based on the specified file path.
     * @param fileNameExt The file name extension for which a format should be created.
     * @returns The new instance of the IExportFileFormat type.
     */
    private static getFormat;
    contents: {
        [id: string]: Content;
    };
    /**
     * Sets the specified content, hint and source.
     * @param source The relative path for the file from which the content was exported.
     * @param id The id identifying the content.
     * @param content The content to set.
     * @param hint The hint text for the content.
     * @param context The context text for the content.
     */
    set(source: string, id: string, content: string, hint?: string, context?: string): void;
    /**
     * Gets the content instance matching the specified id.
     * @param id The id identifying the content.
     * @returns The content instance matching the specified id, or undefined if no instance is found.
     */
    get(id: string): Content | undefined;
    /**
     * Serializes the contents to a JSON string.
     * @returns A JSON string representing the file contents.
     */
    stringify(fileNameExt: string): string;
    /**
     * Saves the contents to the specified file.
     * @param filePath The absolute path for the file to which the contents should be saved.
     * @param encoding The file encoding to use, or undefined to use UTF8.
     * @returns A promise that will be resolved when the file has been saved.
     */
    save(filePath: string, encoding?: BufferEncoding): Promise<void>;
}
