"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CsvExportFileFormat = void 0;
var tslib_1 = require("tslib");
/* tslint:disable: no-require-imports no-var-requires no-submodule-imports */
var csvStringify = require("csv-stringify/lib/sync");
var csvParse = require("csv-parse/lib/sync");
/* tslint:enable */
var export_file_1 = require("../export-file");
/**
 * Represents the CSV file format in which a ExportFile instance may be persisted.
 */
var CsvExportFileFormat = /** @class */ (function () {
    function CsvExportFileFormat() {
    }
    /**
     * Stringifies the specified ExportFile instance.
     * @param exportFile The ExportFile to stringify.
     * @returns A string representing the ExportFile instance.
     */
    CsvExportFileFormat.prototype.stringify = function (exportFile) {
        var e_1, _a;
        var data = [];
        try {
            for (var _b = tslib_1.__values(Object.keys(exportFile.contents)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var id = _c.value;
                var content = exportFile.contents[id];
                data.push({
                    id: id,
                    content: content.content,
                    hint: content.hint,
                    context: content.context ? content.context.map(function (c) { return "\"" + c + "\""; }).join(",") : undefined,
                    sources: content.sources.map(function (c) { return "\"" + c + "\""; }).join(",")
                });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return csvStringify(data, { quotedString: true, columns: ["id", "content", "hint", "context", "sources"] });
    };
    /**
     * Parses the specified string, creating a new instance of the ExportFile type.
     * @param text The string to parse.
     * @returns The new instance of the ExportFile type.
     */
    CsvExportFileFormat.prototype.parse = function (text) {
        var exportFile = new export_file_1.ExportFile();
        var data = csvParse(text, { skip_empty_lines: true, columns: ["id", "content", "hint", "context", "sources"] });
        for (var i = 0; i < data.length; i++) {
            var row = data[i];
            if (!row.id) {
                throw new Error("Invalid data on row " + (i + 1) + ".");
            }
            exportFile.contents[row.id] = new export_file_1.Content(row.content, row.hint || undefined, row.context, row.sources);
        }
        return exportFile;
    };
    return CsvExportFileFormat;
}());
exports.CsvExportFileFormat = CsvExportFileFormat;
//# sourceMappingURL=csv-format.js.map