"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonExportFileFormat = void 0;
var tslib_1 = require("tslib");
var chalk_1 = tslib_1.__importDefault(require("chalk"));
var export_file_1 = require("../export-file");
/**
 * Represents the JSON file format in which an ExportFile instance may be persisted.
 */
var JsonExportFileFormat = /** @class */ (function () {
    function JsonExportFileFormat() {
    }
    /**
     * Stringifies the specified ExportFile instance.
     * @param exportFile The ExportFile to stringify.
     * @returns A string representing the ExportFile instance.
     */
    JsonExportFileFormat.prototype.stringify = function (exportFile) {
        return JSON.stringify(exportFile.contents, function (key, value) {
            return (key === "context" || key === "sources") && value.length === 0 ? undefined : value;
        }, 2);
    };
    /**
     * Parses the specified string, creating a new instance of the ExportFile type.
     * @param text The string to parse.
     * @returns The new instance of the ExportFile type.
     */
    JsonExportFileFormat.prototype.parse = function (text) {
        var e_1, _a, e_2, _b, e_3, _c;
        var exportFile = new export_file_1.ExportFile();
        var data = JSON.parse(text);
        try {
            for (var _d = tslib_1.__values(Object.keys(data)), _e = _d.next(); !_e.done; _e = _d.next()) {
                var id = _e.value;
                var content = data[id];
                if (typeof content.content !== "string") {
                    throw new Error("Invalid content for id '" + chalk_1.default.cyan(id) + "'. Expected a string.");
                }
                if (content.hint != null && typeof content.hint !== "string") {
                    throw new Error("Invalid hint for id '" + chalk_1.default.cyan(id) + "'. Expected a string.");
                }
                if (content.context != null) {
                    if (!(content.context instanceof Array)) {
                        throw new Error("Invalid context for id '" + chalk_1.default.cyan(id) + "'. Expected an array.");
                    }
                    try {
                        for (var _f = (e_2 = void 0, tslib_1.__values(content.context)), _g = _f.next(); !_g.done; _g = _f.next()) {
                            var context = _g.value;
                            if (typeof context !== "string") {
                                throw new Error("Invalid context '" + chalk_1.default.cyan(context) + "' for id '" + chalk_1.default.cyan(id) + "'. Expected a string.");
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                if (content.sources != null) {
                    if (!(content.sources instanceof Array)) {
                        throw new Error("Invalid sources for id '" + chalk_1.default.cyan(id) + "'. Expected an array.");
                    }
                    try {
                        for (var _h = (e_3 = void 0, tslib_1.__values(content.sources)), _j = _h.next(); !_j.done; _j = _h.next()) {
                            var source = _j.value;
                            if (typeof source !== "string") {
                                throw new Error("Invalid source '" + source + "' for id '" + chalk_1.default.cyan(id) + "'. Expected a string.");
                            }
                            if (!/^\.\//.test(source)) {
                                throw new Error("Invalid source '" + chalk_1.default.magenta(source) + "'. Expected a string that begins with '" + chalk_1.default.magenta("./") + "'.");
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                }
                exportFile.contents[id] = new export_file_1.Content(content.content, content.hint, content.context, content.sources);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return exportFile;
    };
    return JsonExportFileFormat;
}());
exports.JsonExportFileFormat = JsonExportFileFormat;
//# sourceMappingURL=json-format.js.map