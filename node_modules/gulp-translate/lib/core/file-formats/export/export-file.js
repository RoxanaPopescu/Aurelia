"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportFile = exports.Content = void 0;
var tslib_1 = require("tslib");
var fs = tslib_1.__importStar(require("fs"));
var path = tslib_1.__importStar(require("path"));
var mkdirp_1 = tslib_1.__importDefault(require("mkdirp"));
var chalk_1 = tslib_1.__importDefault(require("chalk"));
var json_format_1 = require("./formats/json-format");
var csv_format_1 = require("./formats/csv-format");
/**
 * Represents a localizable content instance parsed from one or more templates.
 */
var Content = /** @class */ (function () {
    /**
     * Creates a new instance of the Content type.
     * @param content The exported from the template.
     * @param hint The hint exported along with the content.
     * @param context The contexts exported along with the content.
     * @param sources The relative paths for the HTML files containing an instance of this content.
     */
    function Content(content, hint, context, sources) {
        this.content = content;
        this.hint = hint;
        this.context = context || [];
        this.sources = sources || [];
    }
    return Content;
}());
exports.Content = Content;
/**
 * Represents localizable contents exported from templates, where each content instance is identified by an id,
 * and represented by an object containing the content, its hint text and the list of files in which it was found.
 */
var ExportFile = /** @class */ (function () {
    function ExportFile() {
        this.contents = {};
    }
    /**
     * Parses the specified text, creating a new instance of the ExportFile type.
     * @param text The string to parse.
     * @param fileNameExt The file name extension for the format to parse.
     * @returns The new instance of the ExportFile type.
     */
    ExportFile.parse = function (text, fileNameExt) {
        var format = ExportFile.getFormat(fileNameExt);
        return format.parse(text);
    };
    /**
     * Loads the specified file, creating a new instance of the ExportFile type.
     * @param filePath The absolute path for the file to load.
     * @param encoding The file encoding to use, or undefined to use UTF8.
     * @returns The new instance of the ExportFile type.
     */
    ExportFile.load = function (filePath, encoding) {
        if (encoding === void 0) { encoding = "utf8"; }
        var text = fs.readFileSync(filePath, { encoding: encoding });
        return ExportFile.parse(text, path.extname(filePath));
    };
    /**
     * Creates a new instance of the appropiate IExportFileFormat type, based on the specified file path.
     * @param fileNameExt The file name extension for which a format should be created.
     * @returns The new instance of the IExportFileFormat type.
     */
    ExportFile.getFormat = function (fileNameExt) {
        switch (fileNameExt) {
            case ".json":
                return new json_format_1.JsonExportFileFormat();
            case ".csv":
                return new csv_format_1.CsvExportFileFormat();
            default:
                throw new Error("The file format '" + chalk_1.default.magenta(fileNameExt) + "' is not supported.");
        }
    };
    /**
     * Sets the specified content, hint and source.
     * @param source The relative path for the file from which the content was exported.
     * @param id The id identifying the content.
     * @param content The content to set.
     * @param hint The hint text for the content.
     * @param context The context text for the content.
     */
    ExportFile.prototype.set = function (source, id, content, hint, context) {
        var item = this.contents[id] || (this.contents[id] = new Content(content, hint));
        if (item.sources.indexOf(source) < 0) {
            item.sources.push(source);
        }
        if (item.context == null) {
            item.context = [];
        }
        if (context && item.context.indexOf(context) < 0) {
            item.context.push(context);
        }
    };
    /**
     * Gets the content instance matching the specified id.
     * @param id The id identifying the content.
     * @returns The content instance matching the specified id, or undefined if no instance is found.
     */
    ExportFile.prototype.get = function (id) {
        return this.contents[id];
    };
    /**
     * Serializes the contents to a JSON string.
     * @returns A JSON string representing the file contents.
     */
    ExportFile.prototype.stringify = function (fileNameExt) {
        var format = ExportFile.getFormat(fileNameExt);
        return format.stringify(this);
    };
    /**
     * Saves the contents to the specified file.
     * @param filePath The absolute path for the file to which the contents should be saved.
     * @param encoding The file encoding to use, or undefined to use UTF8.
     * @returns A promise that will be resolved when the file has been saved.
     */
    ExportFile.prototype.save = function (filePath, encoding) {
        if (encoding === void 0) { encoding = "utf8"; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var text;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        text = this.stringify(path.extname(filePath));
                        return [4 /*yield*/, mkdirp_1.default(path.dirname(filePath))];
                    case 1:
                        _a.sent();
                        fs.writeFileSync(filePath, text, { encoding: encoding });
                        return [2 /*return*/];
                }
            });
        });
    };
    return ExportFile;
}());
exports.ExportFile = ExportFile;
//# sourceMappingURL=export-file.js.map