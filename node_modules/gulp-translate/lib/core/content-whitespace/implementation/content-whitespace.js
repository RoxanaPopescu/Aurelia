"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentWhitespace = void 0;
var tslib_1 = require("tslib");
var chalk_1 = tslib_1.__importDefault(require("chalk"));
/*
 * Represents a strategy for normalizing whitespace in the content exported from templates.
 */
var ContentWhitespace = /** @class */ (function () {
    function ContentWhitespace() {
    }
    /**
     * Gets the default whitespace handling option for the specified element or attribute.
     * @param elementName The name of the element for which to get the default option, or to which the attrName applies.
     * @param attrName The name of the attribute for which to get the default option, or undefined to get the default option for the element content.
     * @returns The default whitespace handling option for the specified element or attribute.
     */
    ContentWhitespace.prototype.getDefault = function (elementName, attrName) {
        if (attrName == null) {
            if (["textarea", "input", "select", "option", "pre", "xmp", "plaintext", "listing"].indexOf(elementName) >= 0) {
                return "pre";
            }
            return "trim";
        }
        return "pre";
    };
    /**
     * Normalizes whitespace in the content according to the specified whitespace handling option.
     * @param content The content for which whitespace should be normalized.
     * @param option The whitespace handling to apply.
     * @returns The content where whitespace has been normalized.
     */
    ContentWhitespace.prototype.normalize = function (content, option) {
        var _this = this;
        // tslint:disable-next-line: no-parameter-reassignment
        content = content.replace(/\r\n/g, "\n");
        switch (option) {
            case "trim": return this.normalize(content, "normal").replace(/^\s|\s$/g, "");
            case "normal": return content.replace(/\s+/g, " ");
            case "pre": return content;
            case "pre-line": return content.split("\n").map(function (c) { return _this.normalize(c, "trim"); }).join("\n");
            default:
                throw new Error("Unknown whitespace handling option '" + chalk_1.default.cyan(option) + "'.");
        }
    };
    return ContentWhitespace;
}());
exports.ContentWhitespace = ContentWhitespace;
//# sourceMappingURL=content-whitespace.js.map