import { IContentHash } from "../../content-hash/content-hash";
import { ITemplateLanguage } from "../../template-language/template-language";
import { IContentWhitespace } from "../../content-whitespace/content-whitespace";
import { ITemplateParser, ITemplate } from "../template-parser";
import { TemplateParserConfig } from "../template-parser-config";
/**
 * Represents a parser that parses localizable content instances from an HTML string.
 */
export declare class CheerioTemplateParser implements ITemplateParser {
    private readonly templateLanguage;
    private readonly templateWhitespace;
    private readonly contentHash;
    private readonly config;
    /**
     * Creates a new instance of the CheerioTemplateParser type.
     * @param config The TemplateParserConfig instance.
     * @param templateLanguage The ITemplateLanguage instance.
     * @param templateWhitespace The ITemplateWhitespace instance.
     * @param contentHash The IContentHash instance.
     */
    constructor(config: TemplateParserConfig, templateLanguage: ITemplateLanguage, templateWhitespace: IContentWhitespace, contentHash: IContentHash);
    /**
     * Gets all the localizable content from the specified HTML string.
     * @param html The HTML string representing the template from which the localizable content should be parsed.
     * @returns An ITemplate instance containing the localizable content found in the template.
     */
    parse(template: string): ITemplate;
    /**
     * Recursively parses the element tree and its attributes, starting with the specified element.
     * @param $ The CheerioStatic instance.
     * @param element The element representing the root of the tree.
     * @param expressions The array containing the original expressions for the placeholders in the template.
     * @param contents The array to which exported content instances should be added.
     * @param annotations The array to which extracted annotation instances should be added.
     * @param extract True if the element or one of its ancestor elements should be exported, otherwise false.
     * @param translate True if the element should be translated, otherwise false.
     */
    private parseNode;
    /**
     * Parses the specified attribute.
     * @param $ The CheerioStatic instance.
     * @param element The element representing the root of the tree.
     * @param attrName The name of the attribute.
     * @param contents The array to which exported content instances should be added.
     * @param annotations The array to which extracted annotation instances should be added.
     * @param expressions The array containing the original expressions for the placeholders in the template.
     * @param extract True if the element or one of its ancestor elements should be exported, otherwise false.
     * @param translate True if the element should be translated, otherwise false.
     */
    private parseAttribute;
}
