/// <reference types="node" />
import { IPluginConfig } from "./plugin/plugin-config";
import { IExportTaskConfig } from "./plugin/export/export-task-config";
import { IImportTaskConfig } from "./plugin/import/import-task-config";
import { ITranslateTaskConfig } from "./plugin/translate/translate-task-config";
/**
 * Represents a Gulp plugin, implemented as a wrapper around the translate plugin.
 */
export declare class GulpPlugin {
    private readonly plugin;
    /**
     * Creates a new instance of the GulpPlugin type.
     * @param config The plugin configuration to use, or undefined to use the default.
     */
    constructor(config?: IPluginConfig);
    /**
     * Exports the localized content from the HTML file being processed, into a localizable JSON file.
     * @param config The command configuration to use, or undefined to use the default.
     * @returns A stream transform for processing files.
     */
    export(config: IExportTaskConfig): NodeJS.ReadWriteStream;
    /**
     * Imports the localized content from a localized JSON file, into the HTML file being processed.
     * @param config The command configuration to use.
     * @returns A stream transform for processing files.
     */
    import(config: IImportTaskConfig): NodeJS.ReadWriteStream;
    /**
     * Simulates translation by creating an import file based on the content of the export file, optionally applying pseudo-localization to the content.
     * @param config The command configuration to use, or undefined to use the default.
     * @returns A stream transform for processing files.
     */
    translate(config: ITranslateTaskConfig): NodeJS.ReadWriteStream;
    /**
     * Creates a stream transform that processes files using the specified task.
     */
    private createTransform;
}
