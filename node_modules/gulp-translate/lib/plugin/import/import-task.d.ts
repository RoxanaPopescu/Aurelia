import { ITemplateParser } from "../../core/template-parser/template-parser";
import { IFile } from "../file";
import { PluginConfig } from "../plugin-config";
import { IPluginTask } from "../plugin-task";
import { ImportTaskConfig } from "./import-task-config";
/**
 * Represents the task.
 */
export declare class ImportTask implements IPluginTask {
    private readonly _pluginConfig;
    private readonly _taskConfig;
    private readonly _templateParser;
    private readonly _importContentFiles;
    /**
     * Creates a new instance of the ImportTask type.
     * @param pluginConfig The plugin configuration to use.
     * @param taskConfig The task configuration to use.
     * @param templateParser The ITemplateParser instance to use.
     */
    constructor(pluginConfig: PluginConfig, taskConfig: ImportTaskConfig, templateParser: ITemplateParser);
    /**
     * Processes the specified file.
     * @param file The file to process.
     * @returns A promise that will be resolved with the processed file.
     */
    process(file: IFile): Promise<IFile>;
    /**
     * Loads the import files specified in the task config.
     * @param config The task config.
     * @returns The array of import file instances.
     */
    private getContentFiles;
    /**
     * Gets the first matching content in the import files, or null if the content should be ignored.
     * @param config The task config.
     * @param importContentFiles The import file instances in which to look for the content.
     * @param filePathRelativeToBase The file path, relative to the base path, for the file being processed.
     * @param filePathRelativeToCwd The file path, relative to the current working directory, for the file being processed.
     * @param id The id for which content should be returned.
     * @returns The matching content, or null if no content is found and missing content is allowed.
     */
    private getImportContent;
}
