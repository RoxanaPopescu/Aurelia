"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportTaskConfig = void 0;
var tslib_1 = require("tslib");
var chalk_1 = tslib_1.__importDefault(require("chalk"));
/**
 * Represents the task configuration.
 */
var ImportTaskConfig = /** @class */ (function () {
    /**
     * Creates a new instance of the ImportTaskConfig type.
     * @param config The config object from which the instance should be created.
     */
    function ImportTaskConfig(config) {
        /**
         * The translate annotations to preserve, where 'none' preserves no
         * annotations, 'standard' preserves HTML compliant annotations,
         * 'normalize' preserves all annotations but normalizes them to either
         * 'yes' or 'no', and 'all' preserves all annotations without changes.
         */
        this.preserveAnnotations = "none";
        /**
         * The action to take when encountering content that is marked as
         * localizable but not found in the import file or by the missing
         * content handler, where 'error' causes an error to be thrown, 'log'
         * logs a warning to the console, and 'ignore' ignores the content.
         */
        this.missingContentHandling = "error";
        if (config == undefined) {
            throw new Error("The '" + chalk_1.default.cyan("config") + "' argument is required.");
        }
        if (config.importFilePath != undefined) {
            this.importFilePaths = typeof config.importFilePath === "string" ? [config.importFilePath] : config.importFilePath;
        }
        else {
            this.importFilePaths = [];
        }
        if (config.preserveAnnotations != undefined) {
            this.preserveAnnotations = config.preserveAnnotations;
        }
        if (config.missingContentHandler != undefined) {
            this.missingContentHandler = config.missingContentHandler;
        }
        if (config.missingContentHandling != undefined) {
            this.missingContentHandling = config.missingContentHandling;
        }
        if (config.baseFilePath !== undefined) {
            this.baseFilePath = config.baseFilePath;
        }
    }
    return ImportTaskConfig;
}());
exports.ImportTaskConfig = ImportTaskConfig;
//# sourceMappingURL=import-task-config.js.map