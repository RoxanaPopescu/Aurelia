import { IPluginConfig } from "./plugin-config";
import { ExportTask } from "./export/export-task";
import { IExportTaskConfig } from "./export/export-task-config";
import { ImportTask } from "./import/import-task";
import { IImportTaskConfig } from "./import/import-task-config";
import { TranslateTask } from "./translate/translate-task";
import { ITranslateTaskConfig } from "./translate/translate-task-config";
/**
 * Represents the plugin.
 */
export declare class Plugin {
    private readonly _config;
    private readonly _templateParserConfig;
    private readonly _templateParser;
    /**
     * Creates a new instance of the Plugin type.
     * @param config The plugin configuration to use, or undefined to use the default.
     */
    constructor(config?: IPluginConfig);
    /**
     * Exports the localized content from the HTML file being processed, into a localizable JSON file.
     * @param config The task configuration to use, or undefined to use the default.
     * @returns A task for processing files.
     */
    export(config: IExportTaskConfig): ExportTask;
    /**
     * Imports the localized content from a localized JSON file, into the HTML file being processed.
     * @param config The task configuration to use.
     * @returns A task for processing files.
     */
    import(config: IImportTaskConfig): ImportTask;
    /**
     * Simulates translation by creating an import file based on the content of the export file, optionally applying pseudo-localization to the content.
     * @param config The task configuration to use, or undefined to use the default.
     * @returns A task for processing files.
     */
    translate(config: ITranslateTaskConfig): TranslateTask;
}
