"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranslateTask = void 0;
var tslib_1 = require("tslib");
var path = tslib_1.__importStar(require("path"));
var chalk_1 = tslib_1.__importDefault(require("chalk"));
var export_file_1 = require("../../core/file-formats/export/export-file");
var import_file_1 = require("../../core/file-formats/import/import-file");
var null_content_translator_1 = require("../../core/content-translator/implementations/null/null-content-translator");
var pseudo_content_translator_1 = require("../../core/content-translator/implementations/pseudo/pseudo-content-translator");
var utilities_1 = require("../utilities");
/**
 * Represents the task.
 */
var TranslateTask = /** @class */ (function () {
    /**
     * Creates a new instance of the TranslateTask type.
     * @param pluginConfig The plugin configuration to use.
     * @param taskConfig The task configuration to use.
     * @param templateParserConfig The template parser configuration to use.
     */
    function TranslateTask(pluginConfig, taskConfig, templateParserConfig) {
        this._pluginConfig = pluginConfig;
        this._taskConfig = taskConfig;
        this._templateParserConfig = templateParserConfig;
    }
    /**
     * Processes the specified file.
     * @param file The file to process.
     * @returns A promise that will be resolved with the processed file.
     */
    TranslateTask.prototype.process = function (file) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filePathRelativeToCwd, exportFile, importFile, contentTranslator, _a, _b, id, content;
            var e_1, _c;
            return tslib_1.__generator(this, function (_d) {
                filePathRelativeToCwd = utilities_1.getRelativePath(file.path);
                try {
                    exportFile = export_file_1.ExportFile.parse(file.contents, path.extname(file.path));
                    importFile = new import_file_1.ImportFile();
                    contentTranslator = this.getContentTranslator(this._taskConfig.translator);
                    try {
                        // Translate the contents and add it to the import file.
                        for (_a = tslib_1.__values(Object.keys(exportFile.contents)), _b = _a.next(); !_b.done; _b = _a.next()) {
                            id = _b.value;
                            content = exportFile.contents[id].content;
                            importFile.set("./", id, contentTranslator.translate(content));
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    // Write the localized input file to the destination.
                    file.contents = importFile.stringify(this._taskConfig.fileNameExtension || path.extname(file.path));
                    // Return the processed file.
                    return [2 /*return*/, file];
                }
                catch (error) {
                    throw new Error("Error while processing file " + chalk_1.default.magenta(filePathRelativeToCwd) + ":\n" + error.message);
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Geta a named content translator implementation, or the specified instance.
     */
    TranslateTask.prototype.getContentTranslator = function (nameOrInstance) {
        if (nameOrInstance == null) {
            return new null_content_translator_1.NullContentTranslator();
        }
        if (typeof nameOrInstance === "string") {
            switch (nameOrInstance) {
                case "pseudo": return new pseudo_content_translator_1.PseudoContentTranslator(this._templateParserConfig, this._pluginConfig.templateLanguage);
                default: throw new Error("The content translator '" + chalk_1.default.cyan(nameOrInstance) + "' is not supported.");
            }
        }
        return nameOrInstance;
    };
    return TranslateTask;
}());
exports.TranslateTask = TranslateTask;
//# sourceMappingURL=translate-task.js.map