"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportTaskConfig = void 0;
var tslib_1 = require("tslib");
var chalk_1 = tslib_1.__importDefault(require("chalk"));
/**
 * Represents the task configuration.
 */
var ExportTaskConfig = /** @class */ (function () {
    /**
     * Creates a new instance of the ExportTaskConfig type.
     * @param config The config object from which the instance should be created.
     */
    function ExportTaskConfig(config) {
        /**
         * True to update to an existing export file, false to create a new file.
         */
        this.updateExportFile = false;
        /**
         * True to normalize the content to ensure it has the same whitespace,
         * etc. as it would after importing content, otherwise false.
         */
        this.normalizeContent = false;
        /**
         * The translate annotations to preserve, where 'none' preserves no
         * annotations, 'standard' preserves HTML compliant annotations,
         * 'normalize' preserves all annotations but normalizes them to either
         * 'yes' or 'no', and 'all' preserves all annotations without changes.
         */
        this.preserveAnnotations = "none";
        /**
         * True to replace the content with its id, otherwise false. The value
         * may also be a string, in which case the content will be replaced with
         * an id formatted according to the string, where '*' represents the id.
         * Use this if you prefer injecting the localized content on the
         * client-side, e.g. by replacing ids formatted as placeholders, such as
         * '{{*}}', during template loading, by formatting the ids as actual
         * binding expressions, such as '${translations[*]}', or by otherwise
         * attaching behaviour to the annotations.
         */
        this.replaceWithIds = false;
        /**
         * True to export content for which the 'id' option is specified,
         * otherwise false. This can be overridden by the 'export' option.
         */
        this.exportForId = false;
        /**
         * True to log a warning to the console, if the content of a direct
         * annotation looks suspiciously like annotation options, indicating
         * that it might actually be an orphaned annotation.
         */
        this.logSuspectedOrphans = true;
        if (config === undefined) {
            return;
        }
        if (config.exportFilePath !== undefined) {
            this.exportFilePath = config.exportFilePath;
        }
        if (config.updateExportFile !== undefined) {
            this.updateExportFile = config.updateExportFile;
        }
        if (config.normalizeContent !== undefined) {
            this.normalizeContent = config.normalizeContent;
        }
        if (config.preserveAnnotations !== undefined) {
            this.preserveAnnotations = config.preserveAnnotations;
        }
        if (config.replaceWithIds !== undefined) {
            if (typeof config.replaceWithIds === "string" && !/^([^*]*[*][^*]*)$/.test(config.replaceWithIds)) {
                throw new Error("The '" + chalk_1.default.cyan("replaceWithIds") + "' option must be " + chalk_1.default.cyan("undefined") + ", a " + chalk_1.default.cyan("boolean") + ", or a string containing exactly one '" + chalk_1.default.cyan("*") + "'.");
            }
            this.replaceWithIds = config.replaceWithIds;
        }
        if (config.exportForId !== undefined) {
            this.exportForId = config.exportForId;
        }
        if (config.logSuspectedOrphans !== undefined) {
            this.logSuspectedOrphans = config.logSuspectedOrphans;
        }
        if (config.baseFilePath !== undefined) {
            this.baseFilePath = config.baseFilePath;
        }
    }
    return ExportTaskConfig;
}());
exports.ExportTaskConfig = ExportTaskConfig;
//# sourceMappingURL=export-task-config.js.map