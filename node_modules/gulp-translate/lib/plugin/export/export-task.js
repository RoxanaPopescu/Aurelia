"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportTask = void 0;
var tslib_1 = require("tslib");
var path = tslib_1.__importStar(require("path"));
var chalk_1 = tslib_1.__importDefault(require("chalk"));
var export_file_1 = require("../../core/file-formats/export/export-file");
var content_file_1 = require("../../core/file-formats/content/content-file");
var utilities_1 = require("../../core/utilities");
var utilities_2 = require("../utilities");
/**
 * Represents the task.
 */
var ExportTask = /** @class */ (function () {
    /**
     * Creates a new instance of the ExportTask type.
     * @param pluginConfig The plugin configuration to use.
     * @param taskConfig The task configuration to use.
     * @param templateParser The ITemplateParser instance to use.
     */
    function ExportTask(pluginConfig, taskConfig, templateParser) {
        this._pluginConfig = pluginConfig;
        this._taskConfig = taskConfig;
        this._templateParser = templateParser;
        // If enabled, create the new export file instance.
        if (taskConfig.exportFilePath) {
            try {
                this._exportContentFile = taskConfig.updateExportFile ? export_file_1.ExportFile.load(taskConfig.exportFilePath) : new export_file_1.ExportFile();
            }
            catch (error) {
                throw new Error("Error while loading file " + chalk_1.default.magenta(taskConfig.exportFilePath) + ":\n" + error.message);
            }
        }
    }
    /**
     * Processes the specified file.
     * @param file The file to process.
     * @returns A promise that will be resolved with the processed file.
     */
    ExportTask.prototype.process = function (file) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filePathRelativeToCwd, filePathRelativeToBase, contentFile, _a, _b, key, content, id, template, _c, _d, content, _e, _f, content, _g, _h, content, _j, _k, content, _l, _m, content;
            var e_1, _o, e_2, _p, e_3, _q, e_4, _r, e_5, _s, e_6, _t;
            return tslib_1.__generator(this, function (_u) {
                filePathRelativeToCwd = utilities_2.getRelativePath(file.path);
                filePathRelativeToBase = utilities_2.getRelativePath(file.path, this._taskConfig.baseFilePath || file.base);
                try {
                    // If the file is not HTML, assume it is a content file.
                    if (path.extname(filePathRelativeToBase) !== ".html") {
                        contentFile = content_file_1.ContentFile.parse(file.contents, path.extname(file.path));
                        // If enabled, add the contents to the export file.
                        if (this._taskConfig.exportFilePath) {
                            try {
                                for (_a = tslib_1.__values(Object.keys(contentFile.contents)), _b = _a.next(); !_b.done; _b = _a.next()) {
                                    key = _b.value;
                                    content = contentFile.contents[key];
                                    id = key;
                                    // If enabled, prefix the content id with the relative file path.
                                    if (this._pluginConfig.prefixIdsInContentFiles) {
                                        id = utilities_1.getPrefixedContentId(id, filePathRelativeToBase);
                                    }
                                    this._exportContentFile.set(filePathRelativeToBase, id, content);
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (_b && !_b.done && (_o = _a.return)) _o.call(_a);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                        }
                    }
                    else {
                        template = this._templateParser.parse(file.contents);
                        // If enabled, log a warning if the content looks suspiciously like an orphaned annotation.
                        if (this._taskConfig.logSuspectedOrphans) {
                            try {
                                for (_c = tslib_1.__values(template.contents.filter(function (c) { return c.annotation.isSuspectedOrphan; })), _d = _c.next(); !_d.done; _d = _c.next()) {
                                    content = _d.value;
                                    console.log(chalk_1.default.bgYellow.black("WARN") + " The direct annotation with content '" + chalk_1.default.cyan(content.content) + "' in file " + chalk_1.default.magenta(filePathRelativeToCwd) + " could be an orphaned annotation.");
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (_d && !_d.done && (_p = _c.return)) _p.call(_c);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                        }
                        // If enabled, add the contents to the export file.
                        if (this._taskConfig.exportFilePath) {
                            try {
                                for (_e = tslib_1.__values(template.contents), _f = _e.next(); !_f.done; _f = _e.next()) {
                                    content = _f.value;
                                    if (content.annotation.options.export != null ? content.annotation.options.export : this._taskConfig.exportForId || content.annotation.options.id == null) {
                                        this._exportContentFile.set(filePathRelativeToBase, content.id, content.content, content.annotation.options.hint, content.annotation.options.context);
                                    }
                                }
                            }
                            catch (e_3_1) { e_3 = { error: e_3_1 }; }
                            finally {
                                try {
                                    if (_f && !_f.done && (_q = _e.return)) _q.call(_e);
                                }
                                finally { if (e_3) throw e_3.error; }
                            }
                        }
                        // If enabled, replace each content instance in the template file with its id.
                        if (this._taskConfig.replaceWithIds) {
                            if (typeof this._taskConfig.replaceWithIds === "string") {
                                try {
                                    for (_g = tslib_1.__values(template.contents), _h = _g.next(); !_h.done; _h = _g.next()) {
                                        content = _h.value;
                                        content.content = this._taskConfig.replaceWithIds.replace("*", content.id);
                                    }
                                }
                                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                                finally {
                                    try {
                                        if (_h && !_h.done && (_r = _g.return)) _r.call(_g);
                                    }
                                    finally { if (e_4) throw e_4.error; }
                                }
                            }
                            else {
                                try {
                                    for (_j = tslib_1.__values(template.contents), _k = _j.next(); !_k.done; _k = _j.next()) {
                                        content = _k.value;
                                        content.content = content.id;
                                    }
                                }
                                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                                finally {
                                    try {
                                        if (_k && !_k.done && (_s = _j.return)) _s.call(_j);
                                    }
                                    finally { if (e_5) throw e_5.error; }
                                }
                            }
                        }
                        // If enabled, normalize the content to ensure we get the same whitespace, etc. as we would after importing content.
                        else if (this._taskConfig.normalizeContent) {
                            try {
                                for (_l = tslib_1.__values(template.contents), _m = _l.next(); !_m.done; _m = _l.next()) {
                                    content = _m.value;
                                    content.content = content.content;
                                }
                            }
                            catch (e_6_1) { e_6 = { error: e_6_1 }; }
                            finally {
                                try {
                                    if (_m && !_m.done && (_t = _l.return)) _t.call(_l);
                                }
                                finally { if (e_6) throw e_6.error; }
                            }
                        }
                        // If enabled, remove the localization attributes from the template.
                        template.clean(this._taskConfig.preserveAnnotations);
                        // If needed, replace the contents of the template file.
                        if (this._taskConfig.replaceWithIds || this._taskConfig.normalizeContent || this._taskConfig.preserveAnnotations !== "all") {
                            file.contents = template.toString();
                        }
                    }
                    // Return the processed file.
                    return [2 /*return*/, file];
                }
                catch (error) {
                    throw new Error("Error while processing file " + chalk_1.default.magenta(filePathRelativeToCwd) + ":\n" + error.message);
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Finalizes the task.
     * @returns A promise that will be resolved when the task has finalized its work.
     */
    ExportTask.prototype.finalize = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._taskConfig.exportFilePath) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._exportContentFile.save(this._taskConfig.exportFilePath)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    return ExportTask;
}());
exports.ExportTask = ExportTask;
//# sourceMappingURL=export-task.js.map