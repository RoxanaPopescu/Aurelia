"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Plugin = void 0;
var content_hash_1 = require("../core/content-hash/implementation/content-hash");
var content_whitespace_1 = require("../core/content-whitespace/implementation/content-whitespace");
var template_parser_config_1 = require("../core/template-parser/template-parser-config");
var template_parser_1 = require("../core/template-parser/implementation/template-parser");
var plugin_config_1 = require("./plugin-config");
var export_task_1 = require("./export/export-task");
var export_task_config_1 = require("./export/export-task-config");
var import_task_1 = require("./import/import-task");
var import_task_config_1 = require("./import/import-task-config");
var translate_task_1 = require("./translate/translate-task");
var translate_task_config_1 = require("./translate/translate-task-config");
/**
 * Represents the plugin.
 */
var Plugin = /** @class */ (function () {
    /**
     * Creates a new instance of the Plugin type.
     * @param config The plugin configuration to use, or undefined to use the default.
     */
    function Plugin(config) {
        this._config = new plugin_config_1.PluginConfig(config);
        this._templateParserConfig = new template_parser_config_1.TemplateParserConfig(this._config);
        var templateWhitespace = new content_whitespace_1.ContentWhitespace();
        var contentHash = new content_hash_1.ContentHash(this._config.hashLength);
        this._templateParser = new template_parser_1.CheerioTemplateParser(this._templateParserConfig, this._config.templateLanguage, templateWhitespace, contentHash);
    }
    /**
     * Exports the localized content from the HTML file being processed, into a localizable JSON file.
     * @param config The task configuration to use, or undefined to use the default.
     * @returns A task for processing files.
     */
    Plugin.prototype.export = function (config) {
        var exportConfig = new export_task_config_1.ExportTaskConfig(config);
        var exportTask = new export_task_1.ExportTask(this._config, exportConfig, this._templateParser);
        return exportTask;
    };
    /**
     * Imports the localized content from a localized JSON file, into the HTML file being processed.
     * @param config The task configuration to use.
     * @returns A task for processing files.
     */
    Plugin.prototype.import = function (config) {
        var importConfig = new import_task_config_1.ImportTaskConfig(config);
        var importTask = new import_task_1.ImportTask(this._config, importConfig, this._templateParser);
        return importTask;
    };
    /**
     * Simulates translation by creating an import file based on the content of the export file, optionally applying pseudo-localization to the content.
     * @param config The task configuration to use, or undefined to use the default.
     * @returns A task for processing files.
     */
    Plugin.prototype.translate = function (config) {
        var translateConfig = new translate_task_config_1.TranslateTaskConfig(config);
        var translateTask = new translate_task_1.TranslateTask(this._config, translateConfig, this._templateParserConfig);
        return translateTask;
    };
    return Plugin;
}());
exports.Plugin = Plugin;
//# sourceMappingURL=plugin.js.map