import FormData from "form-data";
import { AppModule } from "../../app-module";

/**
 * Represents a module exposing endpoints related to authentication and authorization.
 */
export class IdentityModule extends AppModule
{
    public configure(): void
    {
        /**
         * Gets the sign in URL for the specified OAuth identity provider.
         * @param params.providerId The ID of the provider to get.
         * @param body.redirectUrl The URL to redirect to when authentication succeeds.
         * @param body.codeChallenge The code challenge created by hashing the code verifier.
         * @returns
         * - 200: The sign in URL for the specified OAuth identity provider.
         */
        this.router.post("/v2/identity/providers/:providerId/get-url", async context =>
        {
            // TODO: How do we specify which provider to use?
            // TODO: We should probably rely on the `x-api-key` header instead of a client ID.
            // TODO: What should state and nonce be?

            const result = await this.apiClient.get("identity/connect/authorize",
            {
                query:
                {
                    "client_id": "bff",
                    "scope": "openid profile email organization-selection",
                    "response_type": "code",
                    "redirect_uri": context.request.body.redirectUrl,
                    "code_challenge": context.request.body.codeChallenge,
                    "code_challenge_method": "S256",
                    "nonce": "TODO",
                    "state": "TODO"
                },
                redirect: "manual"
            });

            context.response.body =
            {
                url: result.response.headers.get("location")
            };

            context.response.status = 200;
        });

        /**
         * Authenticates the user, based the specified OAuth identity provider and code.
         * Note that if the user does not exist, it will be created based on the info received from the identity provider.
         * @param params.providerId The ID of the provider to use.
         * @param body.redirectUrl The redirect URI specified when authenticating with the provider.
         * @param body.codeVerifier The code verifier generated by the client, based on which the code challenge was created.
         * @param body.code The code received in the redirect from the identity provider.
         * @returns
         * - 200: A refresh token and an access token that grants permission to create or choose an organization.
         */
        this.router.post("/v2/identity/providers/:providerId/authenticate", async context =>
        {
            // TODO: How do we specify which provider was used?

            const body = new FormData();
            body.append("client_id", "bff");
            body.append("client_secret", "R4KfRWz66:=?fg2sggwnEWAB]k^iHs3dP3rpmMWN4E@zu#J3*7NiKNk-_i*RdAK6");
            body.append("grant_type", "authorization_code");
            body.append("redirect_uri", context.request.body.redirectUrl);
            body.append("code_verifier", context.request.body.codeVerifier);
            body.append("code", context.request.body.code);

            const result = await this.apiClient.post("identity/connect/token",
            {
                body
            });

            context.response.body =
            {
                accessToken: result.data.access_token,
                refreshToken: result.data.refresh_token
            };

            context.response.status = 200;
        });

        /**
         * Authenticates the user, based on the specified email and password.
         * @param body.email The email address identifying the user.
         * @param body.password The users password.
         * @returns
         * - 200: A refresh token and an access token that grants permission to create or choose an organization.
         */
        this.router.post("/v2/identity/authenticate", async context =>
        {
            const body = new FormData();
            body.append("client_id", "bff.localUserPassword");
            body.append("client_secret", "R4KfRWz66:=?fg2sggwnEWAB]k^iHs3dP3rpmMWN4E@zu#J3*7NiKNk-_i*RdAK6");
            body.append("scope", "openid profile email organization-selection");
            body.append("grant_type", "password");
            body.append("username", context.request.body.email);
            body.append("password", context.request.body.password);

            const result = await this.apiClient.post("identity/connect/token",
            {
                body
            });

            context.response.body =
            {
                accessToken: result.data.access_token,
                refreshToken: result.data.refresh_token
            };

            context.response.status = 200;
        });

        /**
         * Authorizes the user, based on the specified access token and organization.
         * @param body.organizationId The ID of the organization for which to get an access token, if any.
         * @returns
         * - 200: A refresh token and an access token that grants permission to create or choose an organization,
         *   and additional permissions within the specified organization.
         */
        this.router.post("/v2/identity/authorize", async context =>
        {
            const result = await this.apiClient.post("identity/tokenExchange",
            {
                body:
                {
                    organizationId: context.request.body.organizationId
                }
            });

            context.response.body =
            {
                accessToken: result.data.accessToken,
                refreshToken: result.data.refreshToken
            };

            context.response.status = 200;
        });

        /**
         * Reauthorizes the user, based on the specified refresh token, and optionbally, access token.
         * @param body.refreshToken The refresh token for which to get an access token.
         * @returns
         * - 200: A refresh token and an access token that grants permission to create or choose an organization,
         *   and if an access token for an organization was specified, additional permissions within that organization.
         */
        this.router.post("/v2/identity/reauthorize", async context =>
        {
            const body = new FormData();
            body.append("client_id", "bff.localUserPassword");
            body.append("grant_type", "refresh_token");
            body.append("refresh_token", context.request.body.refreshToken);

            const result = await this.apiClient.post("identity/connect/token",
            {
                body
            });

            context.response.body =
            {
                accessToken: result.data.access_token,
                refreshToken: result.data.refresh_token
            };

            context.response.status = 200;
        });

        /**
         * Unauthenticates the user, by revoking the specified refresh token.
         * @param body.refreshToken The refresh token to revoke.
         * @returns
         * - 204: No content.
         */
        this.router.post("/v2/identity/unauthenticate", async context =>
        {
            // TODO: Which value should we use for the authorization header in this request?

            context.authorize();

            const body = new FormData();
            body.append("token", context.request.body.refreshToken);
            body.append("token_type_hint", "refresh_token");

            await this.apiClient.post("identity/connect/revocation",
            {
                body,
                headers:
                {
                    "authorization": "Basic TODO"
                }
            });

            context.response.status = 204;
        });
    }
}
