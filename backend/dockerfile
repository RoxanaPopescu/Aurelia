# Stage 1: Build the `backend` package.

FROM node:14-alpine as build-backend-stage

## Add additional packages.
RUN apk add --no-cache git python make g++

## Set the working directory.
WORKDIR /usr/app/backend

## Copy the `package.json` and `package-lock.json` files first,
## in order to take advantage of cached Docker layers.
COPY ["/backend/package.json", "./"]
COPY ["/backend/package-lock.json", "./"]

## Install the dependencies, only when they have changed.
RUN npm ci

## Set the working directory.
WORKDIR /usr/app

## Copy the `tsconfig.json` files.
COPY ["/tsconfig.json", "./"]
COPY ["/backend/tsconfig.json", "./backend/"]

## Copy the `.tslint` folder and the `tslint.json` files.
COPY ["/.tslint", "./.tslint"]
COPY ["/tslint.json", "./"]
COPY ["/backend/tslint.json", "./backend/"]

## Copy the remaining package contents.
COPY ["/backend/src", "./backend/src"]

## Set the working directory.
WORKDIR /usr/app/.tslint

## Install the dependencies, only when they have changed.
RUN npm install

## Set the working directory.
WORKDIR /usr/app/backend

## Lint the code.
RUN npm run lint

## Start the build.
RUN npm run build


# Stage 2: Run

FROM node:14-alpine as run-stage

## Add additional packages.
RUN apk add --no-cache git python make g++

## Set the working directory.
WORKDIR /usr/app/backend

## Copy the `package.json` and `package-lock.json` files first,
## in order to take advantage of cached Docker layers.
COPY ["/backend/package.json", "./"]
COPY ["/backend/package-lock.json", "./"]

## Install the dependencies, only when they have changed.
RUN npm ci --production

## Copy the artifacts from the `build-backend-stage`.
COPY --from=build-backend-stage ["/usr/app/backend/artifacts/build", "./artifacts/build"]

## Set the port to which server binds.
ENV PORT 8008

## Expose the port to which server binds.
EXPOSE 8008

## Install the PM2 process manager.
RUN npm install pm2 -g

## Start the server.
CMD pm2-runtime -i -1 "artifacts/build/index.js"
