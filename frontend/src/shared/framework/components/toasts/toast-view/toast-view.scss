@import "resources/index";

body
{
    // The vertical spacing between the toasts.
    --toast-margin-top: 4rem;

    // The horizontal spacing between the toasts and the edge of the viewport.
    --toast-margin-right: 4rem;

    // The min height of a toast.
    --toast-min-height: none;

    // The max height of a toast.
    --toast-max-height: 80rem;

    // The min width of a toast.
    --toast-min-width: 110rem;

    // The max width of a toast.
    --toast-max-width: 50vw;

    // The opacity of the backdrop behind the toasts.
    --toast-backdrop-opacity: 0;

    // The color of the `Clear all` button.
    --toast-clear-all-color: var(--surface-text-color);
}

toast-view
{
    --private-toast-backdrop-opacity: var(--toast-backdrop-opacity, 0);

    // Position along the right edge of the viewport.
    position: absolute;
    top: 0;
    right: 0;
    max-height: 100%;

    // Apply spacing at the left and bottom, to prevent clipping of the shadow.
    padding-left: 8rem;
    padding-bottom: calc(2 * var(--toast-margin-right) + var(--font-large-font-size));

    // Use vertical flex layout.
    display: flex;
    flex-direction: column;
    align-items: flex-end;

    .toast-view-clear-all
    {
        // Allow content to be positioned relative to this element.
        position: relative;

        // Use same font size as the heading of the toasts.
        font-size: var(--font-large-font-size);
        line-height: 1;

        // Apply half the padding applied to the toasts.
        padding: 3.5rem 3.5rem 3.5rem 4rem;

        // Align the clear icon with the close icons of the toasts.
        margin-top: var(--toast-margin-top);
        margin-right: var(--toast-margin-right);

        // Apply a border to the toast.
        border: 0 solid var(--border-color);
        border-radius: var(--border-radius-medium);

        // Apply a shadow to the toast.
        box-shadow: var(--shadow-toast);

        // Apply surface style.
        background: var(--surface-color);
        color: var(--surface-text-color);

        // Apply the z-index for toasts.
        z-index: var(--z-index-toast);

        button
        {
            overflow: visible;

            // Allow positioning using z-index.
            position: relative;

            // Apply the z-index for toasts.
            z-index: var(--z-index-toast);

            // Align with the close icons on the toasts.
            padding: 0 3.5rem;
        }

        span
        {
            // Apply spacing before and after the text.
            padding: 0 1rem;
        }
    }

    > compose
    {
        // Allow content to be positioned relative to this element.
        position: relative;

        // Use horizontal flex layout.
        display: flex;

        // Allow clicks to pass through, as the `compose` element is just the presenter.
        pointer-events: none;

        &:not(.--disabled) > *
        {
            // Prevent clicks from passing through the toast at the top.
            pointer-events: initial;
        }

        &.au-enter
        {
            --private-toast-backdrop-opacity: 0;
        }

        &.au-enter-active
        {
            animation: toast-view-compose-enter;
            animation-duration: var(--animation-duration-long);

            --private-toast-backdrop-opacity: var(--toast-backdrop-opacity);
        }

        &.au-leave-active
        {
            animation: toast-view-compose-leave;
            animation-duration: var(--animation-duration-long);

            --private-toast-backdrop-opacity: 0;
        }

        > *
        {
            // Apply the z-index for toasts.
            z-index: var(--z-index-toast);
        }
    }

    .toast-view-clear-all::before
    {
        content: "";

        // Apply the same z-index for as for backdrops.
        z-index: var(--z-index-backdrop);

        // Apply an overlay behind the toast view, to reduce
        // the visibility of the content behind it.
        position: absolute;
        left: -2rem;
        width: 100%;
        height: 1em;

        // Apply a backdrop and shadow with the same color as the parent surface,
        // to reduce the visibility of the content behind the toast.
        box-shadow: 0 0 3.5rem 3.5rem var(--surface-color);
        background: var(--surface-color);
        border-radius: var(--border-radius-medium);

        // Set the opacity of the backdrop.
        opacity: var(--private-toast-backdrop-opacity);
    }

    > compose::before
    {
        content: "";

        // Apply the same z-index for as for backdrops.
        z-index: var(--z-index-backdrop);

        // Apply an overlay behind the toast view, to reduce
        // the visibility of the content behind it.
        position: absolute;
        top: var(--toast-margin-right);
        width: calc(100% - 1.5 * var(--toast-margin-right));
        height: calc(100% - var(--toast-margin-top));

        // Apply a backdrop and shadow with the same color as the parent surface,
        // to reduce the visibility of the content behind the toast.
        box-shadow: 0 0 3.5rem 3.5rem var(--surface-color);
        background: var(--surface-color);
        border-radius: var(--border-radius-medium);

        // Set the opacity of the backdrop.
        opacity: var(--private-toast-backdrop-opacity);

        // Animate opacity changes.
        transition: opacity calc(var(--animation-duration-long) / 2);
    }
}

@keyframes toast-view-compose-enter
{
    to
    {
        // This is needed to ensure the animation events are triggered.
        // Without it, the `aurelia-animator-css` plugin will misbehave.
        // Note that the enter and leave animations cannot be the same.
        --toast-view-compose-animation-trigger: not-a-real-value;
    }
}

@keyframes toast-view-compose-leave
{
    to
    {
        // This is needed to ensure the animation events are triggered.
        // Without it, the `aurelia-animator-css` plugin will misbehave.
        // Note that the enter and leave animations cannot be the same.
        --toast-view-compose-animation-trigger: not-a-real-value;
    }
}
