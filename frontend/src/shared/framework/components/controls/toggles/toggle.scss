@import "resources/index";

body
{
    /// The min-height of the component.
    --toggle-height: 2em;
}

.toggle
{
    /// The color of the indicator on the surface of the component.
    /// NOTE: This should be customized for each theme surface.
    --toggle-surface-indicator-color: var(--surface-toggle-surface-indicator-color);
    --toggle-surface-indicator-color--hover: var(--surface-toggle-surface-indicator-color--hover);
    --toggle-surface-indicator-color--focus: var(--surface-toggle-surface-indicator-color--focus);
    --toggle-surface-indicator-color--active: var(--surface-toggle-surface-indicator-color--active);
    --toggle-surface-indicator-color--invalid: var(--surface-toggle-surface-indicator-color--invalid);
}

.toggle
{
    // Use grid layout.
    display: grid;

    // Align items with the top.
    align-items: flex-start;

    // By default, define the grid without the label.
    grid-template-columns: 1fr;
    grid-template-rows: 1fr min-content;
    grid-template-areas:
        "control"
        "validation";

    &[label="above"]
    {
        // Define the grid with the label above the control.
        grid-template-columns: 1fr;
        grid-template-rows: min-content 1fr min-content;
        grid-template-areas:
            "label"
            "control"
            "validation";

        > .toggle-label
        {
            // Show the label.
            display: block;

            // Apply spacing between the label and the control.
            margin-bottom: var(--font-current-margin-bottom);

            .toggle-description > *
            {
                // Apply spacing between the heading and the description.
                margin-top: var(--font-current-margin-top);
            }
        }
    }

    &[label="before"]
    {
        // Define the grid with the label inline with the control.
        grid-template-columns: 1fr min-content;
        grid-template-rows: 1fr min-content;
        grid-template-areas:
            "label control"
            "validation validation";

        > .toggle-label
        {
            // Show the label.
            display: block;

            // Center vertically.
            align-self: center;

            // Apply spacing between the label and the control.
            padding-right: var(--size-inline-spacing);
        }
    }

    &[label="after"]
    {
        // Define the grid with the label inline with the control.
        grid-template-columns: min-content 1fr;
        grid-template-rows: 1fr min-content;
        grid-template-areas:
            "control label"
            "validation validation";

        > .toggle-label
        {
            // Show the label.
            display: block;

            // Center vertically.
            align-self: center;

            // Apply spacing between the label and the control.
            padding-left: var(--size-inline-spacing);
        }
    }

    > .toggle-label
    {
        // Position the element within the grid.
        grid-area: label;

        // Only shown if the `label` attribute is specified.
        display: none;

        // Use cursor to indicate the element is clickable.
        cursor: pointer;
    }

    > .toggle-control
    {
        // Position the element within the grid.
        grid-area: control;
        justify-self: flex-start;

        // Allow content to be positioned relative to this element.
        position: relative;

        // Use horizontal flex layout.
        display: flex;
        align-items: stretch;

        // Expand to fill the available height.
        height: 100%;

        // Set the min-height.
        min-height: var(--toggle-height);

        // Apply component style for the normal state.
        color: var(--toggle-surface-indicator-color);

        // Use cursor to indicate the element is clickable.
        cursor: pointer;
    }

    > .toggle-validation
    {
        // Position the element within the grid.
        grid-area: validation;

        validation-message
        {
            // Apply spacing above the validation messages.
            margin-top: 1.5rem;
        }
    }

    &.--disabled
    {
        // Reduce opacity when disabled.
        opacity: var(--opacity-disabled);

        > .toggle-label,
        > .toggle-control
        {
            // Use default cursor.
            cursor: default;
        }
    }

    &:not(.--disabled):not(.--readonly):not(.--invalid):not(.--active):hover
    {
        > .toggle-control
        {
            // Apply style for the hover state.
            color: var(--toggle-surface-indicator-color--hover);
        }
    }

    &:not(.--disabled):not(.--readonly):not(.--invalid):not(.--active):focus-within
    {
        > .toggle-control
        {
            // Apply style for the focus state.
            color: var(--toggle-surface-indicator-color--focus);
        }
    }

    &:not(.--invalid).--active
    {
        > .toggle-control
        {
            // Apply style for the active state.
            color: var(--toggle-surface-indicator-color--active);
        }
    }

    &:not(.--disabled):not(.--readonly).--invalid
    {
        > .toggle-control
        {
            // Apply style for the invalid state.
            color: var(--toggle-surface-indicator-color--invalid);
        }
    }
}

// Apply basic styling to native controls, so we won't have to repeat this in every component.

// stylelint-disable-next-line no-duplicate-selectors
.toggle > .toggle-control
{
    input
    {
        appearance: none;
        margin: 0;
        opacity: 0;
        cursor: inherit;
    }
}

check-toggle,
radio-toggle
{
    &[label="before"]
    {
        .toggle-control icon svg
        {
            // The icon does not fill its viewbox, so to ensure the right edge
            // edge aligns with other controls, we translate the icon right.
            transform: translateX(0.75rem);
        }

        &[label="before"] > .toggle-label
        {
            // Apply reduced spacing between the label and the control,
            // to compensate for the translation of the icon.
            padding-left: calc(var(--size-inline-spacing) - 0.75rem);
        }
    }

    &[label="after"]
    {
        .toggle-control icon svg
        {
            // The icon does not fill its viewbox, so to ensure the left edge
            // edge aligns with other controls, we translate the icon left.
            transform: translateX(-0.75rem);
        }

        &[label="before"] > .toggle-label
        {
            // Apply reduced spacing between the label and the control,
            // to compensate for the translation of the icon.
            padding-right: calc(var(--size-inline-spacing) - 0.75rem);
        }
    }
}
