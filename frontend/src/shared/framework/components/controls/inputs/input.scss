@import "resources/index";

:root
{
    /// The color of the surface of the component.
    --input-surface-color: unset;
    --input-surface-color--hover: unset;
    --input-surface-color--focus: unset;
    --input-surface-color--invalid: unset;

    /// The color of the text on the surface of the component.
    --input-surface-text-color: unset;
    --input-surface-text-color--hover: unset;
    --input-surface-text-color--focus: unset;
    --input-surface-text-color--invalid: unset;

    /// The color of the border of the component.
    --input-border-color: unset;
    --input-border-color--hover: unset;
    --input-border-color--focus: unset;
    --input-border-color--invalid: unset;

    /// The width of the border of the component.
    --input-border-width: var(--border-width-thin);

    /// The radius of the border of the component.
    --input-border-radius: var(--border-radius-medium);

    /// The padding of the component.
    --input-padding: 2.25rem 3rem;

    /// The default width of the component.
    --input-width: 36rem;

    /// The min-height of the component, if it allows resizing.
    --input-min-height: 10rem;

    /// The max-height of the component, if it allows resizing.
    --input-max-height: none;
}

.input
{
    // Use grid layout.
    display: grid;

    // Align items with the top.
    align-items: flex-start;

    // By default, define the grid without the label.
    grid-template-columns: 1fr;
    grid-template-rows: 1fr min-content;
    grid-template-areas:
        "control"
        "validation";

    &[label="above"]
    {
        // Define the grid with the label above the control.
        grid-template-columns: 1fr;
        grid-template-rows: min-content 1fr min-content;
        grid-template-areas:
            "label"
            "control"
            "validation";

        > .input-label
        {
            // Show the label.
            display: block;

            // Apply spacing between the label and the control.
            margin-bottom: var(--font-current-margin-bottom);

            .input-description > *
            {
                // Apply spacing between the heading and the description.
                margin-top: var(--font-current-margin-top);
            }
        }
    }

    &[label="before"]
    {
        // Define the grid with the label inline with the control.
        grid-template-columns: 0.4fr 0.6fr;
        grid-template-rows: 1fr min-content;
        grid-template-areas:
            "label control"
            "validation validation";

        > .input-label
        {
            // Show the label.
            display: block;

            // Center vertically.
            align-self: center;

            // Apply spacing between the label and the control.
            margin-right: var(--size-inline-spacing-large);
        }
    }

    &[label="after"]
    {
        // Define the grid with the label inline with the control.
        grid-template-columns: 0.6fr 0.4fr;
        grid-template-rows: 1fr min-content;
        grid-template-areas:
            "control label"
            "validation validation";

        > .input-label
        {
            // Show the label.
            display: block;

            // Center vertically.
            align-self: center;

            // Apply spacing between the label and the control.
            margin-left: var(--size-inline-spacing-large);
        }
    }

    > .input-label
    {
        // Position the element within the grid.
        grid-area: label;

        // Always use the default cursor.
        cursor: default;

        // Only shown if the `label` attribute is specified.
        display: none;
    }

    &:focus-within > .input-label
    {
        // Make the label non-clickable when focus is already within.
        pointer-events: none;
    }

    > .input-control
    {
        // Position the element within the grid.
        grid-area: control;

        // Allow content to be positioned relative to this element.
        position: relative;

        // Use horizontal flex layout.
        display: flex;
        align-items: stretch;

        // Set the min-height.
        min-height: var(--input-min-height);

        // Set the min-width and max-width.
        max-width: var(--input-width);
        min-width: 100%;

        // Inherit the resize mode.
        resize: inherit;

        // Apply a border around the component.
        border: var(--input-border-width) solid;
        border-radius: var(--input-border-radius);

        // Apply component style for the normal state.
        border-color: var(--input-border-color);
        background: var(--input-surface-color);
        color: var(--input-surface-text-color);

        > div[slot="before"],
        > div[slot="after"]
        {
            // Use horizontal flex layout.
            display: flex;
            align-items: stretch;

            .input
            {
                // Remove default width if nested within another input.
                --input-width: auto;

                // Remove border if nested within another input.
                --input-border-width: 0;
                --input-border-radius: 0;
            }
        }

        > span[slot="before"]
        {
            // Apply the input padding, except at the end closest to the input value.
            padding: var(--input-padding);
            padding-right: 0;
        }

        > span[slot="after"]
        {
            // Apply the input padding, except at the end closest to the input value.
            padding: var(--input-padding);
            padding-left: 0;
        }

        > .input-control-inner
        {
            // Allow content to be positioned relative to this element.
            position: relative;

            // Expand to fill the available width.
            width: 100%;

            // Use horizontal flex layout.
            display: flex;
            align-items: center;

            // Inherit the resize mode.
            resize: inherit;

            .input-input
            {
                // Expand to fill the available width and height.
                width: 100%;
                min-height: 100%;

                // Inherit the resize mode.
                resize: inherit;
            }

            .input-input,
            .input-value,
            .input-placeholder
            {
                // Apply the input padding.
                padding: var(--input-padding);
            }

            .input-value,
            .input-placeholder
            {
                // Position to cover the input.
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
            }

            .input-value
            {
                // Truncate text content with an ellipsis.
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }

            .input-placeholder
            {
                // Make the placeholder appear faded.
                opacity: var(--opacity-faded);

                // Prevent overflow.
                overflow: hidden;

                // Ignore pointer events.
                pointer-events: none;

                > span
                {
                    // Truncate text content with an ellipsis.
                    display: block;
                    white-space: nowrap;
                    overflow: hidden;
                    text-overflow: ellipsis;
                }
            }
        }
    }

    > .input-validation
    {
        // Position the element within the grid.
        grid-area: validation;

        validation-message
        {
            // Apply spacing above the validation messages.
            margin-top: 1.5rem;
        }
    }

    &:not(.--multiline)
    {
        > .input-control > .input-control-inner > .input-placeholder
        {
            // Center content vertically.
            display: flex;
            align-items: center;
        }
    }

    &.--disabled
    {
        // Reduce opacity when disabled.
        opacity: var(--opacity-disabled);
    }

    &:not(.--disabled):not(.--readonly):not(.--invalid):hover
    {
        > .input-control
        {
            // Apply style for the hover state.
            border-color: var(--input-border-color--hover);
            background: var(--input-surface-color--hover);
            color: var(--input-surface-text-color--hover);
        }
    }

    &:not(.--disabled):not(.--readonly):focus-within
    {
        > .input-control
        {
            // Apply style for the focus state.
            border-color: var(--input-border-color--focus);
            background: var(--input-surface-color--focus);
            color: var(--input-surface-text-color--focus);
        }
    }

    &:not(.--disabled):not(.--readonly).--invalid
    {
        > .input-control
        {
            // Apply style for the invalid state.
            border-color: var(--input-border-color--invalid);
            background: var(--input-surface-color--invalid);
        }

        &:not(.--empty) > .input-control > .input-control-inner
        {
            // Apply the color for the invalid state only if the input is not empty.
            color: var(--input-surface-text-color--invalid);
        }
    }

    &:not(.--empty)
    {
        > .input-control > .input-control-inner > .input-placeholder
        {
            // Hide the placeholder when the input is not empty.
            opacity: 0;
        }
    }

    &:focus-within, &.--invalid
    {
        > .input-control > .input-control-inner > .input-value
        {
            // Hide the value when the input is invalid or focused.
            opacity: 0;

            // Allow pointer events to reach teh input below.
            pointer-events: none;
        }
    }

    &:not(:focus-within):not(.--invalid)
    {
        > .input-control > .input-control-inner > .input-input.--hide-when-unfocused
        {
            // Hide the input element when the input is valid and unfocused.
            opacity: 0;
        }
    }
}

.input > .input-control dropdown
{
    // Ensure the dropdown width matches the input width.
    min-width: calc(var(--dropdown-min-width) + 2 * var(--input-border-width));
}

// Apply basic styling to native controls, so we won't have to repeat this in every component.

// stylelint-disable-next-line no-duplicate-selectors
.input > .input-control > .input-control-inner
{
    input.input-input,
    textarea.input-input
    {
        // Remove the default browser styling.
        margin: 0;
        appearance: none;
        border: none;
        border-radius: 0;
        background: transparent;
        color: inherit;
        font: inherit;
    }

    textarea.input-input
    {
        // Constrain resizing.
        min-height: calc(var(--input-min-height) - 2 * var(--input-border-width));
        max-height: calc(var(--input-max-height) - 2 * var(--input-border-width));
    }
}
