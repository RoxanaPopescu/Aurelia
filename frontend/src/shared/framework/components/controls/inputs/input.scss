:root
{
    // TODO: Add --input-heading-font.
    // TODO: Add --input-description-font.
    // TODO: What about label-related margins?
    // TODO: What about label-related colors or opacity?

    /// The max width of the component.
    /// The default ensures a reasonable width when no width is specified.
    --input-max-width: 144rem;

    /// The min width of the component.
    /// The default ensures the input will expand, up to the its max width.
    --input-min-width: 100%;

    /// The min-height of the component, if resizing is allowed.
    /// The default prevents resizing to less than the height of a single-line input.
    --input-min-height: 40rem;

    /// The max-height of the component, if resizing is allowed.
    /// The default allows resizing to fit any content.
    --input-max-height: none;

    /// The padding of the component.
    --input-padding: 9rem 12rem;

    /// The width of the border of the component.
    --input-border-width: var(--border-width-thin);

    /// The radius of the border of the component.
    --input-border-radius: var(--border-radius-medium);

    // The padding to apply to actions within the before or after slot.
    // Note: To get square action hit areas, this should be equal to the top and bottom input padding.
    --input-surface-action-padding: 9rem;

    // The padding to apply to the action at the start of the before slot.
    // Note: This must be equal to the left input padding.
    --input-surface-action-padding-right: 12rem;

    // The padding to apply to the action at the end of the after slot.
    // Note: This must be equal to the right input padding.
    --input-surface-action-padding-left: 12rem;
}

body
{
    // The size of icons that are part of the input.
    // The default matches the line height of the base text.
    --input-icon-size: var(--font-base-line-height);
}

.input
{
    /// The color of the border of the component.
    /// Note: This should be customized for each theme surface.
    --input-border-color: var(--surface-input-border-color);
    --input-border-color--hover: var(--surface-input-border-color--hover);
    --input-border-color--focus: var(--surface-input-border-color--focus);
    --input-border-color--invalid: var(--surface-input-border-color--invalid);

    /// The color of the surface of the component.
    /// Note: This should be customized for each theme surface.
    --input-surface-color: var(--surface-input-surface-color);
    --input-surface-color--hover: var(--surface-input-surface-color--hover);
    --input-surface-color--focus: var(--surface-input-surface-color--focus);
    --input-surface-color--invalid: var(--surface-input-surface-color--invalid);

    /// The color of the text on the surface of the component.
    /// Note: This should be customized for each theme surface.
    --input-surface-text-color: var(--surface-input-surface-text-color);
    --input-surface-text-color--hover: var(--surface-input-surface-text-color--hover);
    --input-surface-text-color--focus: var(--surface-input-surface-text-color--focus);
    --input-surface-text-color--invalid: var(--surface-input-surface-text-color--invalid);

    /// The color of icons on the surface of the component.
    /// Note: This should be customized for each theme surface.
    --input-surface-icon-color: var(--surface-input-surface-icon-color);
    --input-surface-icon-color--hover: var(--surface-input-surface-icon-color--hover);
    --input-surface-icon-color--focus: var(--surface-input-surface-icon-color--focus);
    --input-surface-icon-color--invalid: var(--surface-input-surface-icon-color--invalid);

    // The opacity of the required indicator.
    --input-required-indicator-opacity: 0;
    --input-required-indicator-opacity--invalid: 0;

    // The color of the required indicator.
    --input-required-indicator-color: inherit;
    --input-required-indicator-color--invalid: inherit;
}

.input
{
    // Use grid layout.
    display: grid;

    // Align items with the top.
    align-items: flex-start;

    // By default, define the grid without the label.
    grid-template-columns: 1fr;
    grid-template-rows: 1fr min-content;
    grid-template-areas:
        "control"
        "validation";

    // Use default cursor.
    cursor: default;

    &[label="above"]
    {
        // Define the grid with the label above the control.
        grid-template-columns: 1fr;
        grid-template-rows: min-content 1fr min-content;
        grid-template-areas:
            "label"
            "control"
            "validation";

        > .input-label
        {
            // Show the label.
            display: block;

            // Apply spacing between the label and the control.
            margin-bottom: calc(var(--font-current-margin-bottom) - var(--font-small-margin-top));

            .input-heading > *
            {
                // Apply spacing between the heading and the description.
                margin-bottom: var(--font-small-margin-top);
            }

            .input-description > *
            {
                // Apply spacing between the heading and the description.
                margin-bottom: var(--font-small-margin-top);
            }
        }
    }

    &[label="before"],
    &[label="after"]
    {
        > .input-label
        {
            .input-description > *
            {
                // Apply spacing between the heading and the description.
                margin-top: var(--font-current-margin-bottom);
            }
        }
    }

    &[label="before"]
    {
        // Define the grid with the label inline with the control.
        grid-template-columns: 0.4fr 0.6fr;
        grid-template-rows: 1fr min-content;
        grid-template-areas:
            "label control"
            "validation validation";

        > .input-label
        {
            // Show the label.
            display: block;

            // Center vertically.
            align-self: center;

            // Apply spacing between the label and the control.
            margin-right: var(--size-inline-spacing-large);
        }
    }

    &[label="after"]
    {
        // Define the grid with the label inline with the control.
        grid-template-columns: 0.6fr 0.4fr;
        grid-template-rows: 1fr min-content;
        grid-template-areas:
            "control label"
            "validation validation";

        > .input-label
        {
            // Show the label.
            display: block;

            // Center vertically.
            align-self: center;

            // Apply spacing between the label and the control.
            margin-left: var(--size-inline-spacing-large);
        }
    }

    > .input-label
    {
        // Position the element within the grid.
        grid-area: label;

        // Allow content to be positioned relative to this element.
        position: relative;

        // Always use the default cursor.
        cursor: default;

        // Only shown if the `label` attribute is specified.
        display: none;
    }

    &.--open:focus-within > .input-label
    {
        // Make the label non-clickable when focus is already within.
        pointer-events: none;
    }

    > .input-control
    {
        // Position the element within the grid.
        grid-area: control;

        // Allow content to be positioned relative to this element.
        position: relative;

        // Use horizontal flex layout.
        display: flex;
        align-items: stretch;

        // Set the min-height.
        min-height: var(--input-min-height);

        // Set the min-width and max-width.
        max-width: var(--input-max-width);
        min-width: var(--input-min-width);

        // Inherit the resize mode.
        resize: inherit;

        // Apply a border around the component.
        border: var(--input-border-width) solid;
        border-radius: var(--input-border-radius);

        // Apply component style for the normal state.
        border-color: var(--input-border-color);
        background: var(--input-surface-color);
        color: var(--input-surface-text-color);

        > div[slot="before"],
        > div[slot="after"]
        {
            // Use horizontal flex layout.
            display: flex;
            align-items: stretch;

            .input
            {
                // Remove default width if nested within another input.
                --input-max-width: auto;

                // Remove border if nested within another input.
                --input-border-width: 0;
                --input-border-radius: 0;
            }
        }

        > span[slot="before"]
        {
            // Apply the input padding, except at the end closest to the input value.
            padding: var(--input-padding);
            padding-right: 0;

            // Prevent wrapping.
            white-space: nowrap;
        }

        > span[slot="after"]
        {
            // Apply the input padding, except at the end closest to the input value.
            padding: var(--input-padding);
            padding-left: 0;

            // Prevent wrapping.
            white-space: nowrap;
        }

        > div[slot="before"],
        > div[slot="after"]
        {
            > icon,
            > a[appearance="none"],
            > button[appearance="none"]
            {
                // Apply the input padding.
                padding: var(--input-padding);

                // Override the left and right padding.
                // This should, assuming the action is square, result in a square hit area.
                padding-left: var(--input-surface-action-padding);
                padding-right: var(--input-surface-action-padding);
            }
        }

        > div[slot="before"]
        {
            > icon,
            > a[appearance="none"],
            > button[appearance="none"]
            {
                &:first-child
                {
                    // If the action is the first child, apply left margin, such that the
                    // sum of the padding and margin equals the left input padding.
                    // margin-left: calc(var(--input-surface-action-padding-left) - var(--input-surface-action-padding));

                    // If the action is the first child, apply the left padding, which sacrifices the
                    // square hit area in favor of ensuring the padding matches the input padding.
                    padding-left: var(--input-surface-action-padding-left);
                }
            }
        }

        > div[slot="after"]
        {
            > icon,
            > a[appearance="none"],
            > button[appearance="none"]
            {
                &:last-child
                {
                    // If the action is the last child, apply right margin, such that the
                    // sum of the padding and margin equals the right input padding.
                    // margin-right: calc(var(--input-surface-action-padding-right) - var(--input-surface-action-padding));

                    // If the action is the last child, apply the right padding, which sacrifices the
                    // square hit area in favor of ensuring the padding matches the input padding.
                    padding-right: var(--input-surface-action-padding-right);
                }
            }
        }

        > .input-control-inner
        {
            // Allow content to be positioned relative to this element.
            position: relative;

            // Expand to fill the available width.
            width: 100%;

            // Allow the element to shrink, to make room for the before and after slots.
            min-width: 0;

            // Use horizontal flex layout.
            display: flex;
            align-items: center;

            // Inherit the resize mode.
            resize: inherit;

            .input-input
            {
                // Expand to fill the available width and height.
                width: 100%;
                min-height: 100%;

                // Inherit the resize mode.
                resize: inherit;
            }

            .input-input,
            .input-value,
            .input-placeholder
            {
                // Apply the input padding.
                padding: var(--input-padding);
            }

            .input-value,
            .input-placeholder
            {
                // Position to cover the input.
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
            }

            .input-value
            {
                // Truncate text content with an ellipsis.
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }

            .input-placeholder
            {
                // Make the placeholder appear faded.
                opacity: var(--opacity-faded);

                // Prevent overflow.
                overflow: hidden;

                // Ignore pointer events.
                pointer-events: none;

                [slot="placeholder"]
                {
                    // Allow the element, which is a flex child, to shrink to less than
                    // the width of its children, thus enabling text truncation.
                    min-width: 0;
                }

                span[slot="placeholder"]
                {
                    // Truncate text content with an ellipsis.
                    display: block;
                    white-space: nowrap;
                    overflow: hidden;
                    text-overflow: ellipsis;
                }
            }
        }
    }

    > .input-validation
    {
        // Position the element within the grid.
        grid-area: validation;

        validation-message
        {
            // Apply spacing above the validation messages.
            margin-top: 6rem;
        }
    }

    &:not(.--multiline)
    {
        > .input-control > .input-control-inner > .input-placeholder
        {
            // Center content vertically.
            display: flex;
            align-items: center;
        }
    }

    &.--disabled
    {
        // Reduce opacity when disabled.
        opacity: var(--opacity-disabled);
    }

    &:not(.--disabled):not(.--readonly)
    {
        &:hover
        {
            > .input-control
            {
                // Apply style for the hover state.
                border-color: var(--input-border-color--hover);
                background: var(--input-surface-color--hover);
                color: var(--input-surface-text-color--hover);
            }
        }

        &:focus-within
        {
            > .input-control
            {
                // Apply style for the focus state.
                border-color: var(--input-border-color--focus);
                background: var(--input-surface-color--focus);
                color: var(--input-surface-text-color--focus);
            }
        }
    }

    &:not(.--disabled):not(.--readonly).--required,
    .input:not(.--disabled):not(.--readonly) &.--required,
    .input-container:not(.--disabled):not(.--readonly) &.--required
    {
        > .input-label > .input-heading > [slot]::after
        {
            // If the input is editable and required, append a `*` after the heading.
            content: " *";

            // Apply the style for the normal state.
            color: var(--input-required-indicator-color);
            opacity: var(--input-required-indicator-opacity);
        }
    }

    &:not(.--disabled).--readonly,
    &:not(.--disabled):not(.--readonly)
    {
        &.--invalid
        {
            > .input-control
            {
                // Apply style for the invalid state.
                border-color: var(--input-border-color--invalid);
                background: var(--input-surface-color--invalid);
                color: var(--input-surface-text-color);
            }

            &:not(.--empty) > .input-control > .input-control-inner
            {
                // Apply the text color for the invalid state only if the input is not empty.
                color: var(--input-surface-text-color--invalid);
            }

            &.--required
            {
                > .input-label > .input-heading > [slot]::after
                {
                    // Apply the style for the invalid state.
                    color: var(--input-required-indicator-color--invalid);
                    opacity: var(--input-required-indicator-opacity--invalid);
                }
            }
        }
    }

    &:not(.--empty)
    {
        > .input-control > .input-control-inner > .input-placeholder
        {
            // Hide the placeholder when the input is not empty.
            opacity: 0;
        }
    }

    &:focus-within, &.--invalid
    {
        > .input-control > .input-control-inner > .input-value
        {
            // Hide the value when the input is invalid or focused.
            opacity: 0;

            // Allow pointer events to reach the input below.
            pointer-events: none;
        }
    }

    &:not(:focus-within):not(.--invalid)
    {
        > .input-control > .input-control-inner > .input-input.--hide-when-unfocused
        {
            // Hide the input element when the input is valid and unfocused.
            opacity: 0;
        }
    }
}

.input > .input-control dropdown
{
    // Ensure the dropdown width matches the input width.
    min-width: calc(var(--dropdown-min-width) + 2 * var(--input-border-width));
}

// Apply basic styling to icons within the input.

.input
{
    > .input-control
    {
        icon
        {
            font-size: var(--input-icon-size);
        }

        icon,
        dropdown-icon
        {
            color: var(--input-surface-icon-color);
        }

        icon[tabindex]:hover,
        dropdown-icon:hover,
        button[appearance="none"]:hover > icon
        {
            color: var(--input-surface-icon-color--hover);
            cursor: pointer;
        }

        .focus-visible & icon[tabindex]:focus,
        .focus-visible & dropdown-icon:focus,
        .focus-visible & button[appearance="none"]:hover > icon
        {
            color: var(--input-surface-icon-color--focus);
        }
    }
}

// Apply basic styling to native controls, so we won't have to repeat this in every component.

.input > .input-control > .input-control-inner
{
    input.input-input,
    textarea.input-input
    {
        // Remove the default browser styling.
        margin: 0;
        appearance: none;
        border: none;
        border-radius: 0;
        background: transparent;
        color: inherit;
        font: inherit;
    }

    textarea.input-input
    {
        // Constrain resizing.
        min-height: calc(var(--input-min-height) - 2 * var(--input-border-width));
        max-height: calc(var(--input-max-height) - 2 * var(--input-border-width));
    }

    .input-input
    {
        // Ensure the opacity remains the same, even if opacity
        // is generally applied to disabled elements.
        opacity: 1;
    }
}

// Apply autofill styling to native controls, so we won't have to repeat this in every component.

.input > .input-control > .input-control-inner .input-input
{
    &:-webkit-autofill
    {
        -webkit-background-clip: text;
        -webkit-text-fill-color: var(--input-surface-text-color--autofill, var(--input-surface-text-color));

        &:hover
        {
            -webkit-text-fill-color: var(--input-surface-text-color--autofill, var(--input-surface-text-color--hover));
        }

        &:focus
        {
            -webkit-text-fill-color: var(--input-surface-text-color--autofill, var(--input-surface-text-color--focus));
        }
    }

    &::-webkit-credentials-auto-fill-button
    {
        background-color: var(--input-surface-icon-color);

        &:hover
        {
            background-color: var(--input-surface-icon-color--hover);
        }

        &:focus
        {
            background-color: var(--input-surface-icon-color--focus);
        }
    }
}

.input.--invalid > .input-control > .input-control-inner .input-input
{
    &:-webkit-autofill
    {
        -webkit-text-fill-color: var(--input-surface-text-color--invalid, var(--input-surface-text-color));
    }

    &::-webkit-credentials-auto-fill-button
    {
        background-color: var(--input-surface-icon-color--invalid);
    }
}
