patch-package
--- a/node_modules/react-selectize/src/index.d.ts
+++ b/node_modules/react-selectize/src/index.d.ts
@@ -1,4 +1,4 @@
-import * as React from 'react';
+import * as React from "react";
 
 export interface OptionValue {
   label: string;
@@ -21,14 +21,19 @@ export interface SimpleSelectProps {
   autofocus?: boolean;
   cancelKeyboardEventOnSelection?: boolean;
   className?: string;
-  createFromSearch?(items: OptionValue[], search: string): OptionValue;
+  createFromSearch?(items: OptionValue[], search: string): OptionValue | null;
   defaultValue?: OptionValue;
   delimiters?: [any];
   disabled?: boolean;
   dropdownDirection?: number;
   editable?(item: OptionValue): string;
   filterOptions?(items: OptionValue[], search: string): OptionValue[];
-  firstOptionIndexToHighlight?(index: number, items: OptionValue[], item: OptionValue, search: string): number;
+  firstOptionIndexToHighlight?(
+    index: number,
+    items: OptionValue[],
+    item: OptionValue,
+    search: string
+  ): number;
   groupId?(item: OptionValue): any;
   groups?: any[];
   groupsAsColumns?: boolean;
@@ -47,17 +52,23 @@ export interface SimpleSelectProps {
   options?: OptionValue[];
   placeholder?: string;
   renderGroupTitle?(index: number, group: any): React.ReactElement<any>;
-  renderNoResultsFound?(item: OptionValue, search: string): React.ReactElement<any>;
+  renderNoResultsFound?(
+    item: OptionValue,
+    search: string
+  ): React.ReactElement<any>;
   renderOption?(item: OptionValue): React.ReactElement<any>;
   renderResetButton?(): React.ReactElement<any>;
-  renderToggleButton?(options: {open: boolean, flipped: any}): React.ReactElement<any>;
+  renderToggleButton?(options: {
+    open: boolean;
+    flipped: any;
+  }): React.ReactElement<any>;
   renderValue?(item: OptionValue): React.ReactElement<any>;
   restoreOnBackspace?(item: OptionValue): string;
   search?: string;
   serialize?(item: OptionValue): string;
   style?: any;
   tether?: boolean;
-  'tether-props'?: any;
+  "tether-props"?: any;
   theme?: string;
   transitionEnter?: boolean;
   transitionEnterTimeout?: number;
@@ -65,20 +76,25 @@ export interface SimpleSelectProps {
   transitionLeaveTimeout?: number;
   uid?(item: OptionValue): any;
   value?: OptionValue;
-  valueFromPaste?(options: OptionValue[], value: OptionValue, pastedText: string): OptionValue;
+  valueFromPaste?(
+    options: OptionValue[],
+    value: OptionValue,
+    pastedText: string
+  ): OptionValue;
 }
 
-declare class SimpleSelect extends React.Component<SimpleSelectProps, any> {
-  
-}
+declare class SimpleSelect extends React.Component<SimpleSelectProps, any> {}
 
 export interface MultiSelectProps extends SimpleSelectProps {
   anchor?: OptionValue;
-  createFromSearch?(items: OptionValue[], search: string): OptionValue;
-  createFromSearch?(options: OptionValue[], values: OptionValue[], search: string): OptionValue;
+  createFromSearch?(items: OptionValue[], search: string): OptionValue | null;
   defaultValues?: OptionValue[];
   filterOptions?(items: OptionValue[], search: string): OptionValue[];
-  filterOptions?(options: OptionValue[], values: OptionValue[], search: string): OptionValue[];
+  filterOptions?(
+    options: OptionValue[],
+    values: OptionValue[],
+    search: string
+  ): OptionValue[];
   onAnchorChange?(item: OptionValue): void;
   onBlur?(event: SimpleSelectEvent): void;
   onBlur?(event: MultipleSelectEvent): void;
@@ -87,9 +103,12 @@ export interface MultiSelectProps extends SimpleSelectProps {
   onValuesChange?(item: OptionValue): void;
   maxValues?: number;
   closeOnSelect?: boolean;
-  valuesFromPaste?(options: OptionValue[], values: OptionValue[], pastedText: string): OptionValue[];
+  values?: OptionValue[];
+  valuesFromPaste?(
+    options: OptionValue[],
+    values: OptionValue[],
+    pastedText: string
+  ): OptionValue[];
 }
 
-declare class MultiSelect extends React.Component<MultiSelectProps, any> {
-  
-}
\ No newline at end of file
+declare class MultiSelect extends React.Component<MultiSelectProps, any> {}
