////
/// @group resources/styles/foundation/document
////

/// Foundational styles for the document.
$__summary: comment;

@import "resources/index";


// The root element
// See: https://www.w3.org/TR/html51/semantics.html#the-root-element
// ====================================================================================================

html
{
    // Ensure the element fills the viewport.
    height: 100%;
    width: 100%;

    // Set the root font size, so it can be used with the `rem` unit.
    font-size: var(--size-unit);

    // Prevent text size adjustments on mobile devices.
    text-size-adjust: none;

    // Prevent highlight when touching elements.
    -webkit-tap-highlight-color: transparent;

    // Class indicating that the document represents an app.
    &.app
    {
        // Prevent text selection, except where explicitly enabled.
        user-select: none;

        // Prevent pull-to-refresh.
        overscroll-behavior-y: none;
    }
}


// Sectioning
// See: https://www.w3.org/TR/html51/sections.html
// ====================================================================================================

body
{
    // Use border box sizing by default.
    box-sizing: border-box;

    // Remove the default margin.
    margin: 0;

    // Ensure the element fills the width of the viewport.
    width: 100%;

    // Class indicating that the document represents an app.
    .app &
    {
        // Ensure the element fills the height of the viewport.
        height: 100%;

        // Prevent the page from scrolling.
        overflow: hidden;

        // Prevent pull-to-refresh.
        overscroll-behavior-y: none;
    }
}

// All elements
// ====================================================================================================

*,
*::before,
*::after
{
    // Ensure all elements inherit the default box sizing.
    box-sizing: inherit;
}

*:focus
{
    // Remove default focus style.
    transition: outline 0s;
    outline: none;

    // Show focus indicator during keyboard navigation or when an element
    // was programmatically focused - unless it has explicitly opted out.
    .focus-visible &:not(.focus-hidden)
    {
        // Set the focus style to use during keyboard navigation.
        outline-offset: var(--accessibility-focus-outline-offset);
        outline-width: var(--accessibility-focus-outline-width);
        outline-style: var(--accessibility-focus-outline-style);
        outline-color: var(--accessibility-focus-outline-color);
    }
}

.focus-debug
{
    *:focus
    {
        // Set the focus style to use during keyboard navigation.
        outline: dotted #ff0000;
        outline-width: 2rem;
        outline-offset: 2rem;
    }

    .focus-visible .focus-hidden:focus
    {
        // Set the focus style to use during keyboard navigation.
        outline: dotted #008000;
        outline-width: 2rem;
        outline-offset: 2rem;
    }

    .focus-visible :not(.focus-hidden):focus
    {
        // Set the focus style to use during keyboard navigation.
        outline: solid #008000;
        outline-width: 2rem;
        outline-offset: 2rem;
    }
}

.feature-overlay-scrollbar [inert]
{
    &[scroll], [scroll]
    {
        // HACK:
        // This is a workaround for what appears to be a bug in Chrome,
        // where overlay scrollbars appear while modals are animating.
        // Note that the hack only applies if all scrollbars are of the
        // overlay type, as it might otherwise cause a layout shift.

        // Hide scrollbars on, or within, inert elements.
        overflow: hidden !important;
    }
}
