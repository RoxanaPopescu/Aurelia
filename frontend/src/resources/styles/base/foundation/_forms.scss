////
/// @group foundation/forms
////

/// Foundational styles for the form elements defined by the HTML standard.
$__summary: comment;

@import "base/resources/index";


// Forms
// See: https://www.w3.org/TR/html51/sec-forms.html
// ====================================================================================================


// form
// Container for controls whose state will be submitted together.
// ----------------------------------------------------------------------------------------------------

form
{
    // Ensure consistent `margin` and `padding`.
    margin: 0;
    padding: 0;
}

// fieldset
// Container for related controls within a form.
// ----------------------------------------------------------------------------------------------------

fieldset
{
    // Remove the default browser styling.
    appearance: none;

    // Ensure consistent `margin` and `padding`.
    margin: 0;
    padding: 0;
    border: none;
}

// disabled
// The disabled state, in which opacity is applied to make the element appear unavailable.
// ----------------------------------------------------------------------------------------------------

[disabled]
{
    opacity: var(--opacity-disabled);
    pointer-events: none;
    cursor: default;

    [disabled]
    {
        // TODO: This is not ideal, as it might override existing opacity applied to the element.
        // Needed to prevent unwanted opacity when a disabled
        // element is nested inside another disabled element.
        opacity: 1;
    }
}


// placeholder
// The placeholder content, to which opacity is applied to make it appear faded.
// ----------------------------------------------------------------------------------------------------

::placeholder
{
    color: var(--color-surface-input-surface-subtle);
}


// button and anchor
// Buttons and anchors, supporting the appearances `none`, `text`, `outline` and `solid`, and the accents,
// `neutral`, `primary`, `positive` and `negative`. Note that the default button appearance is `text`,
// the default accent is `neutral`, and buttons with `text` appearance have the touch area of a button.
// ----------------------------------------------------------------------------------------------------

// Style for anchors with unspecified appearance.
a:not([appearance])
{
    &[accent="neutral"]
    {
        color: var(--color-surface-neutral-text);
    }

    &[accent="primary"]
    {
        color: var(--color-surface-primary-text);
    }

    &[accent="positive"]
    {
        color: var(--color-surface-positive-text);
    }

    &[accent="attention"]
    {
        color: var(--color-surface-attention-text);
    }

    &[accent="negative"]
    {
        color: var(--color-surface-negative-text);
    }
}

button,
a[appearance]
{
    display: block;

    // Remove default appearance.
    appearance: none;
    font: inherit;

    // Prevent overflow.
    overflow: hidden;

    // Ensure consistent cursor.
    cursor: pointer;

    form &
    {
        // Apply the default `margin` when the control is within a form.
        margin-top: var(--font-current-margin-top);
        margin-bottom: var(--font-current-margin-bottom);

        // Expand to fill the full width when the control is within a form.
        width: 100%;
    }

    &:not([appearance="none"])
    {
        // Style to appear as a button.
        padding: 0 3.5rem;
        min-width: 10rem;
        line-height: calc(10rem - 2 * var(--border-width-medium));
        border: var(--border-width-medium) solid;
        border-radius: var(--border-radius-medium);
        border-color: transparent;
        text-align: center;
    }

    // Style for the `none` appearance.
    &[appearance="none"]
    {
        padding: 0;
        border: none;
        background: none;
        text-align: left;

        &:not([accent])
        {
            color: inherit;
        }

        &[accent="neutral"]
        {
            color: var(--color-surface-neutral-text);
        }

        &[accent="primary"]
        {
            color: var(--color-surface-primary-text);
        }

        &[accent="positive"]
        {
            color: var(--color-surface-positive-text);
        }

        &[accent="attention"]
        {
            color: var(--color-surface-attention-text);
        }

        &[accent="negative"]
        {
            color: var(--color-surface-negative-text);
        }
    }

    // Style for the `text` and unspecified appearance.
    &:not([appearance]),
    &[appearance="text"]
    {
        background: transparent;
        border-color: transparent;

        &:not([accent]),
        &[accent="neutral"]
        {
            color: var(--color-surface-neutral-text);
        }

        &[accent="primary"]
        {
            color: var(--color-surface-primary-text);
        }

        &[accent="positive"]
        {
            color: var(--color-surface-positive-text);
        }

        &[accent="attention"]
        {
            color: var(--color-surface-attention-text);
        }

        &[accent="negative"]
        {
            color: var(--color-surface-negative-text);
        }
    }

    // Style for the `icon` type.
    &[appearance="icon"]
    {
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 50%;
        min-width: 0;
        padding: 0.25em;
        background: transparent;
        border-color: transparent;

        &:not([accent]),
        &[accent="neutral"]
        {
            color: var(--color-surface-neutral-text);
        }

        &[accent="primary"]
        {
            color: var(--color-surface-primary-text);
        }

        &[accent="positive"]
        {
            color: var(--color-surface-positive-text);
        }

        &[accent="attention"]
        {
            color: var(--color-surface-attention-text);
        }

        &[accent="negative"]
        {
            color: var(--color-surface-negative-text);
        }
    }

    // Style for the `outline` type.
    &[appearance="outline"],
    &:not([appearance]):hover,
    &:not([appearance]):focus,
    &[appearance="text"]:hover,
    &[appearance="text"]:focus
    {
        background: transparent;

        &:not([accent]),
        &[accent="neutral"]
        {
            border-color: var(--color-surface-neutral-border);
            color: var(--color-surface-neutral-text);
        }

        &[accent="primary"]
        {
            border-color: var(--color-surface-primary-border);
            color: var(--color-surface-primary-text);
        }

        &[accent="positive"]
        {
            border-color: var(--color-surface-positive-border);
            color: var(--color-surface-positive-text);
        }

        &[accent="attention"]
        {
            border-color: var(--color-surface-attention-border);
            color: var(--color-surface-attention-text);
        }

        &[accent="negative"]
        {
            border-color: var(--color-surface-negative-border);
            color: var(--color-surface-negative-text);
        }
    }

    // Style for the `solid` type.
    &[appearance="solid"],
    &[appearance="icon"]:hover,
    &[appearance="icon"]:focus
    {
        &:not([accent]),
        &[accent="neutral"]
        {
            border-color: var(--color-surface-neutral-border);
            background: var(--color-surface-neutral-surface);
            color: var(--color-surface-neutral-surface-text);
        }

        &[accent="primary"]
        {
            border-color: var(--color-surface-primary-border);
            background: var(--color-surface-primary-surface);
            color: var(--color-surface-primary-surface-text);
        }

        &[accent="positive"]
        {
            border-color: var(--color-surface-positive-border);
            background: var(--color-surface-positive-surface);
            color: var(--color-surface-positive-surface-text);
        }

        &[accent="attention"]
        {
            border-color: var(--color-surface-attention-border);
            background: var(--color-surface-attention-surface);
            color: var(--color-surface-attention-surface-text);
        }

        &[accent="negative"]
        {
            border-color: var(--color-surface-negative-border);
            background: var(--color-surface-negative-surface);
            color: var(--color-surface-negative-surface-text);
        }
    }
}


// label
// Label which should be used to wrap any inputs that need a description.
// ----------------------------------------------------------------------------------------------------

label
{
    display: flex;
    align-items: center;

    // Ensure consistent cursor.
    cursor: pointer;
}


// select, textarea, and inputs (text-like)
// Controls which resemble text inputs, meaning that they can be styled as rectangles.
// ----------------------------------------------------------------------------------------------------

select,
textarea,
input:not([type]),
input[type="color"],
input[type="date"],
input[type="datetime-local"],
input[type="email"],
input[type="month"],
input[type="number"],
input[type="password"],
input[type="search"],
input[type="tel"],
input[type="text"],
input[type="time"],
input[type="url"],
input[type="week"]
{
    // Remove the default browser styling.
    appearance: none;
    display: block;
    padding: 0 3rem;
    width: 64rem;
    min-width: 10rem;
    line-height: calc(10rem - 2 * var(--border-width-thin));
    border: var(--border-width-thin) solid var(--color-surface-input-border);
    border-radius: var(--border-radius-medium);
    font-size: inherit;
    color: var(--color-surface-input-surface-text);
    background: var(--color-surface-input-surface);

    form &
    {
        // Apply the default `margin` when the control is within a form.
        margin-top: var(--font-current-margin-top);
        margin-bottom: var(--font-current-margin-bottom);

        // Expand to fill the full width when the control is within a form.
        width: 100%;
    }

    label &
    {
        // Ensure the label text appears before the control.
        align-self: flex-end;

        // Ensure proper spacing between the label and the control.
        margin-left: var(--size-inline-spacing);

        // Ensure consistent default layout of forms.
        margin-left: auto;
        flex-basis: 60%;
    }
}

select
{
    // Remove the default browser styling.
    appearance: none;

    // Ensure consistent cursor.
    cursor: pointer;

    // Ensure consistent appearance of the dropdown arrow.
    padding-right: 2em;
    background-position: right -1.25em center;
    background-repeat: no-repeat;
    background-size: 1em;
    background-origin: content-box;

    background-image: url(
        "data:image/svg+xml;utf8," +
        "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'>" +
            "<path d='M128.4 160L96 192.3 256 352l160-159.7-32.4-32.3L256 287.3z' stroke='red'/>" +
        "</svg>"
    );
}


// input (checkbox)
// Checkbox supporting the checked, unchecked and indeterminate state.
// ----------------------------------------------------------------------------------------------------

input[type="checkbox"]
{
    $size: 1.5em;
    $offset: ($size - 1em) / 2;

    // Remove the default browser styling.
    appearance: none;
    position: relative;
    margin: 0 $offset;
    border: none;
    padding: 0;
    width: 1em;
    height: 1em;
    line-height: inherit;
    font-size: inherit;
    background: none;
    cursor: pointer;

    &::after
    {
        content: "";
        position: absolute;
        left: ($offset * -1);
        top: ($offset * -1);
        width: $size;
        height: $size;
        background: var(--color-surface-primary-icon);
        mask-size: $size;
        mask-repeat: no-repeat;

        mask-image: url(
            "data:image/svg+xml;utf8," +
            "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'>" +
                "<path d='M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z'/>" +
                "<path d='M0 0h24v24H0z' fill='none'/>" +
            "</svg>"
        );
    }

    &:checked::after
    {
        mask-image: url(
            "data:image/svg+xml;utf8," +
            "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'>" +
                "<path d='M0 0h24v24H0z' fill='none'/>" +
                "<path d='M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z'/>" +
            "</svg>"
        );
    }

    &:indeterminate::after
    {
        mask-image: url(
            "data:image/svg+xml;utf8," +
            "<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 24 24' width='24' height='24'>" +
                "<defs>" +
                    "<path id='a' d='M0 0h24v24H0z'/>" +
                "</defs>" +
                "<clipPath id='b'><use xlink:href='#a' overflow='visible'/></clipPath>" +
                "<path clip-path='url(#b)' d='M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z'/>" +
            "</svg>"
        );
    }

    form &
    {
        // Apply the default `margin` when the control is within a form.
        margin-top: var(--font-current-margin-top);
        margin-bottom: var(--font-current-margin-bottom);
    }

    label &
    {
        // Ensure proper spacing between the label and the control.
        margin-right: var(--size-inline-spacing);
    }
}

/**
 * Custom checkbox using an icon font.
 *
input[type="checkbox"]
{
    $size: 1.5em;
    $offset: ($size - 1em) / 2;

    // Remove the default browser styling.
    appearance: none;
    position: relative;
    border: none;
    padding: 0;
    width: 1em;
    height: 1em;
    margin: 0 $offset;
    line-height: inherit;
    font-size: inherit;
    background: none;
    cursor: pointer;

    &::after
    {
        position: absolute;
        line-height: 1;
        font-size: $size;
        margin-left: ($offset / $size * -1em);
        margin-top: ($offset / $size * -1em);
        font-family: var(--font-family-icon);
        color: var(--color-surface-primary-icon);

        // Render the unchecked state.
        content: "check_box_outline_blank";
    }

    &:checked::after
    {
        // Render the checked state.
        content: "check_box";
    }

    &:indeterminate::after
    {
        // Render the indeterminate state.
        content: "indeterminate_check_box";
    }

    form &
    {
        // Apply the default `margin` when the control is within a form.
        margin-top: var(--font-current-margin-top);
        margin-bottom: var(--font-current-margin-bottom);
    }

    label &
    {
        // Ensure proper spacing between the label and the control.
        margin-right: var(--size-inline-spacing);
    }
}
*/


// input (radio)
// Radio button supporting the checked and unchecked state.
// ----------------------------------------------------------------------------------------------------

input[type="radio"]
{
    $size: 1.5em;
    $offset: ($size - 1em) / 2;

    // Remove the default browser styling.
    appearance: none;
    position: relative;
    margin: 0 $offset;
    border: none;
    padding: 0;
    width: 1em;
    height: 1em;
    line-height: inherit;
    font-size: inherit;
    background: none;
    cursor: pointer;

    &::after
    {
        content: "";
        position: absolute;
        left: ($offset * -1);
        top: ($offset * -1);
        width: $size;
        height: $size;
        background: var(--color-surface-primary-icon);
        mask-size: $size;
        mask-repeat: no-repeat;

        mask-image: url(
            "data:image/svg+xml;utf8," +
            "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'>" +
                "<path d='M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z'/>" +
                "<path d='M0 0h24v24H0z' fill='none'/>" +
            "</svg>"
        );
    }

    &:checked::after
    {
        mask-image: url(
            "data:image/svg+xml;utf8," +
            "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'>" +
                "<path d='M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z'/>" +
                "<path d='M0 0h24v24H0z' fill='none'/>" +
            "</svg>"
        );
    }

    form &
    {
        // Apply the default `margin` when the control is within a form.
        margin-top: var(--font-current-margin-top);
        margin-bottom: var(--font-current-margin-bottom);
    }

    label &
    {
        // Ensure proper spacing between the label and the control.
        margin-right: var(--size-inline-spacing);
    }
}

/**
 * Custom radio button using an icon font.
 *
input[type="radio"]
{
    $size: 1.5em;
    $offset: ($size - 1em) / 2;

    // Remove the default browser styling.
    padding: 0;
    appearance: none;
    background: none;
    border: none;

    // Ensure consistent cursor.
    cursor: pointer;

    position: relative;
    width: 1em;
    height: 1em;
    margin: 0 $offset;
    line-height: inherit;
    font-size: inherit;

    &::after
    {
        position: absolute;
        line-height: 1;
        font-size: $size;
        margin-left: ($offset / $size * -1em);
        margin-top: ($offset / $size * -1em);
        font-family: var(--font-family-icon);
        color: var(--color-surface-primary-icon);

        // Render the unchecked state.
        content: "radio_button_unchecked";
    }

    &:checked::after
    {
        // Render the checked state.
        content: "radio_button_checked";
    }

    form &
    {
        // Apply the default `margin` when the control is within a form.
        margin-top: var(--font-current-margin-top);
        margin-bottom: var(--font-current-margin-bottom);
    }

    label &
    {
        // Ensure proper spacing between the label and the control.
        margin-right: var(--size-inline-spacing);
    }
}
*/
